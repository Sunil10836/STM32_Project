
RTC_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021f4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080023b8  080023b8  000123b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002488  08002488  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08002488  08002488  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002488  08002488  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002488  08002488  00012488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800248c  0800248c  0001248c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08002490  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000080  08002510  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002510  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005010  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fb0  00000000  00000000  000250ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003d0  00000000  00000000  00026070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000348  00000000  00000000  00026440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003b5e  00000000  00000000  00026788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003ea4  00000000  00000000  0002a2e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000cdc9  00000000  00000000  0002e18a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0003af53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000014cc  00000000  00000000  0003afa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000080 	.word	0x20000080
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080023a0 	.word	0x080023a0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000084 	.word	0x20000084
 8000200:	080023a0 	.word	0x080023a0

08000204 <main>:

#include <stdio.h>
#include "../Inc/RTC_LCD.h"

int main()
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	printf("RTC Test\n");
 8000208:	4813      	ldr	r0, [pc, #76]	; (8000258 <main+0x54>)
 800020a:	f001 fc73 	bl	8001af4 <puts>

	if(RTC_DS1307_Init())
 800020e:	f000 fa97 	bl	8000740 <RTC_DS1307_Init>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	d003      	beq.n	8000220 <main+0x1c>
	{
		printf("RTC Init Failed\n");
 8000218:	4810      	ldr	r0, [pc, #64]	; (800025c <main+0x58>)
 800021a:	f001 fc6b 	bl	8001af4 <puts>
		while(1);
 800021e:	e7fe      	b.n	800021e <main+0x1a>
	}

	systick_timer_init(1);
 8000220:	2001      	movs	r0, #1
 8000222:	f000 f81f 	bl	8000264 <systick_timer_init>

	LCD_Init();
 8000226:	f000 fc91 	bl	8000b4c <LCD_Init>

	LCD_Send_String("RTC Test...");
 800022a:	480d      	ldr	r0, [pc, #52]	; (8000260 <main+0x5c>)
 800022c:	f000 fd9c 	bl	8000d68 <LCD_Send_String>
	delay_ms(2000);
 8000230:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000234:	f000 f97c 	bl	8000530 <delay_ms>

	LCD_Display_Clear();
 8000238:	f000 fdc2 	bl	8000dc0 <LCD_Display_Clear>
	LCD_Display_Resturn_Home();
 800023c:	f000 fdca 	bl	8000dd4 <LCD_Display_Resturn_Home>

	RTC_Set_Time();
 8000240:	f000 f850 	bl	80002e4 <RTC_Set_Time>

	RTC_Set_Date();
 8000244:	f000 f861 	bl	800030a <RTC_Set_Date>

	RTC_Print_Time();
 8000248:	f000 f898 	bl	800037c <RTC_Print_Time>

	RTC_Print_Date();
 800024c:	f000 f870 	bl	8000330 <RTC_Print_Date>

	return 0;
 8000250:	2300      	movs	r3, #0
}
 8000252:	4618      	mov	r0, r3
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	080023d8 	.word	0x080023d8
 800025c:	080023e4 	.word	0x080023e4
 8000260:	080023f4 	.word	0x080023f4

08000264 <systick_timer_init>:

void systick_timer_init(uint32_t tick_hz)
{
 8000264:	b480      	push	{r7}
 8000266:	b087      	sub	sp, #28
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 800026c:	4b14      	ldr	r3, [pc, #80]	; (80002c0 <systick_timer_init+0x5c>)
 800026e:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <systick_timer_init+0x60>)
 8000272:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 8000274:	4a14      	ldr	r2, [pc, #80]	; (80002c8 <systick_timer_init+0x64>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	fbb2 f3f3 	udiv	r3, r2, r3
 800027c:	3b01      	subs	r3, #1
 800027e:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 8000280:	697b      	ldr	r3, [r7, #20]
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 8000286:	697b      	ldr	r3, [r7, #20]
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	431a      	orrs	r2, r3
 800028e:	697b      	ldr	r3, [r7, #20]
 8000290:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 8000292:	693b      	ldr	r3, [r7, #16]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	f043 0202 	orr.w	r2, r3, #2
 800029a:	693b      	ldr	r3, [r7, #16]
 800029c:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 800029e:	693b      	ldr	r3, [r7, #16]
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f043 0204 	orr.w	r2, r3, #4
 80002a6:	693b      	ldr	r3, [r7, #16]
 80002a8:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 80002aa:	693b      	ldr	r3, [r7, #16]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	f043 0201 	orr.w	r2, r3, #1
 80002b2:	693b      	ldr	r3, [r7, #16]
 80002b4:	601a      	str	r2, [r3, #0]

}
 80002b6:	bf00      	nop
 80002b8:	371c      	adds	r7, #28
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bc80      	pop	{r7}
 80002be:	4770      	bx	lr
 80002c0:	e000e014 	.word	0xe000e014
 80002c4:	e000e010 	.word	0xe000e010
 80002c8:	00f42400 	.word	0x00f42400

080002cc <SysTick_Handler>:

void SysTick_Handler(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	LCD_Set_Cursor(1, 1);
 80002d0:	2101      	movs	r1, #1
 80002d2:	2001      	movs	r0, #1
 80002d4:	f000 fd88 	bl	8000de8 <LCD_Set_Cursor>

	RTC_Print_Time();
 80002d8:	f000 f850 	bl	800037c <RTC_Print_Time>

	RTC_Print_Date();
 80002dc:	f000 f828 	bl	8000330 <RTC_Print_Date>

}
 80002e0:	bf00      	nop
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <RTC_Set_Time>:

void RTC_Set_Time(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
	RTC_time_t current_time;

	current_time.hours = 2;
 80002ea:	2302      	movs	r3, #2
 80002ec:	71bb      	strb	r3, [r7, #6]
	current_time.minutes = 44;
 80002ee:	232c      	movs	r3, #44	; 0x2c
 80002f0:	717b      	strb	r3, [r7, #5]
	current_time.seconds = 30;
 80002f2:	231e      	movs	r3, #30
 80002f4:	713b      	strb	r3, [r7, #4]
	current_time.time_format = TIME_FORMAT_12HRS_PM;
 80002f6:	2301      	movs	r3, #1
 80002f8:	71fb      	strb	r3, [r7, #7]

	RTC_DS1307_Set_Current_Time(&current_time);
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	4618      	mov	r0, r3
 80002fe:	f000 fa3d 	bl	800077c <RTC_DS1307_Set_Current_Time>
}
 8000302:	bf00      	nop
 8000304:	3708      	adds	r7, #8
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}

0800030a <RTC_Set_Date>:

void RTC_Set_Date(void)
{
 800030a:	b580      	push	{r7, lr}
 800030c:	b082      	sub	sp, #8
 800030e:	af00      	add	r7, sp, #0
	RTC_date_t current_date;

	current_date.day = MONDAY;
 8000310:	2302      	movs	r3, #2
 8000312:	71fb      	strb	r3, [r7, #7]
	current_date.date = 29;
 8000314:	231d      	movs	r3, #29
 8000316:	713b      	strb	r3, [r7, #4]
	current_date.month = 4;
 8000318:	2304      	movs	r3, #4
 800031a:	717b      	strb	r3, [r7, #5]
	current_date.year = 24;
 800031c:	2318      	movs	r3, #24
 800031e:	71bb      	strb	r3, [r7, #6]

	RTC_DS1307_Set_Current_Date(&current_date);
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	4618      	mov	r0, r3
 8000324:	f000 facc 	bl	80008c0 <RTC_DS1307_Set_Current_Date>
}
 8000328:	bf00      	nop
 800032a:	3708      	adds	r7, #8
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}

08000330 <RTC_Print_Date>:

void RTC_Print_Date(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
	RTC_date_t current_date;

	RTC_DS1307_Get_Current_Date(&current_date);
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	4618      	mov	r0, r3
 800033a:	f000 faf9 	bl	8000930 <RTC_DS1307_Get_Current_Date>

	//Print Date => 29/04/24 <MONDAY>
	//printf("Current Date : %s <%s>\n", date_to_string(&current_date), get_day_of_week(current_date.day));
	LCD_Set_Cursor(2, 1);
 800033e:	2101      	movs	r1, #1
 8000340:	2002      	movs	r0, #2
 8000342:	f000 fd51 	bl	8000de8 <LCD_Set_Cursor>
	LCD_Send_String(date_to_string(&current_date));
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	4618      	mov	r0, r3
 800034a:	f000 f8c7 	bl	80004dc <date_to_string>
 800034e:	4603      	mov	r3, r0
 8000350:	4618      	mov	r0, r3
 8000352:	f000 fd09 	bl	8000d68 <LCD_Send_String>
	LCD_Send_Data('<');
 8000356:	203c      	movs	r0, #60	; 0x3c
 8000358:	f000 fce4 	bl	8000d24 <LCD_Send_Data>
	LCD_Send_String(get_day_of_week(current_date.day));
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	4618      	mov	r0, r3
 8000360:	f000 f83a 	bl	80003d8 <get_day_of_week>
 8000364:	4603      	mov	r3, r0
 8000366:	4618      	mov	r0, r3
 8000368:	f000 fcfe 	bl	8000d68 <LCD_Send_String>
	LCD_Send_Data('>');
 800036c:	203e      	movs	r0, #62	; 0x3e
 800036e:	f000 fcd9 	bl	8000d24 <LCD_Send_Data>
}
 8000372:	bf00      	nop
 8000374:	3708      	adds	r7, #8
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
	...

0800037c <RTC_Print_Time>:

void RTC_Print_Time(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
	RTC_time_t current_time;

	RTC_DS1307_Get_Current_Time(&current_time);
 8000382:	463b      	mov	r3, r7
 8000384:	4618      	mov	r0, r3
 8000386:	f000 fa43 	bl	8000810 <RTC_DS1307_Get_Current_Time>

	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS)
 800038a:	78fb      	ldrb	r3, [r7, #3]
 800038c:	2b02      	cmp	r3, #2
 800038e:	d013      	beq.n	80003b8 <RTC_Print_Time+0x3c>
	{
		//12 Hour Format
		if(current_time.time_format == TIME_FORMAT_12HRS_PM)
 8000390:	78fb      	ldrb	r3, [r7, #3]
 8000392:	2b01      	cmp	r3, #1
 8000394:	d102      	bne.n	800039c <RTC_Print_Time+0x20>
		{
			am_pm = "PM";
 8000396:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <RTC_Print_Time+0x54>)
 8000398:	607b      	str	r3, [r7, #4]
 800039a:	e001      	b.n	80003a0 <RTC_Print_Time+0x24>
		}
		else
		{
			am_pm = "AM";
 800039c:	4b0d      	ldr	r3, [pc, #52]	; (80003d4 <RTC_Print_Time+0x58>)
 800039e:	607b      	str	r3, [r7, #4]
		}
		//printf("Current Time : %s %s\n",time_to_string(&current_time), am_pm);	//02:44:30 PM
		LCD_Send_String(time_to_string(&current_time));
 80003a0:	463b      	mov	r3, r7
 80003a2:	4618      	mov	r0, r3
 80003a4:	f000 f870 	bl	8000488 <time_to_string>
 80003a8:	4603      	mov	r3, r0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f000 fcdc 	bl	8000d68 <LCD_Send_String>
		LCD_Send_String(am_pm);
 80003b0:	6878      	ldr	r0, [r7, #4]
 80003b2:	f000 fcd9 	bl	8000d68 <LCD_Send_String>
	{
		//24 Hour format
		//printf("Current Time : %s\n",time_to_string(&current_time));	//02:44:30
		LCD_Send_String(time_to_string(&current_time));
	}
}
 80003b6:	e007      	b.n	80003c8 <RTC_Print_Time+0x4c>
		LCD_Send_String(time_to_string(&current_time));
 80003b8:	463b      	mov	r3, r7
 80003ba:	4618      	mov	r0, r3
 80003bc:	f000 f864 	bl	8000488 <time_to_string>
 80003c0:	4603      	mov	r3, r0
 80003c2:	4618      	mov	r0, r3
 80003c4:	f000 fcd0 	bl	8000d68 <LCD_Send_String>
}
 80003c8:	bf00      	nop
 80003ca:	3708      	adds	r7, #8
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	08002400 	.word	0x08002400
 80003d4:	08002404 	.word	0x08002404

080003d8 <get_day_of_week>:

char* get_day_of_week(uint8_t i)
{
 80003d8:	b4b0      	push	{r4, r5, r7}
 80003da:	b08b      	sub	sp, #44	; 0x2c
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4603      	mov	r3, r0
 80003e0:	71fb      	strb	r3, [r7, #7]
	char* days[] = {"SUN", "MON","TUES","WED","THU","FRI","SAT"};
 80003e2:	4b0b      	ldr	r3, [pc, #44]	; (8000410 <get_day_of_week+0x38>)
 80003e4:	f107 040c 	add.w	r4, r7, #12
 80003e8:	461d      	mov	r5, r3
 80003ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return days[i-1];
 80003f6:	79fb      	ldrb	r3, [r7, #7]
 80003f8:	3b01      	subs	r3, #1
 80003fa:	009b      	lsls	r3, r3, #2
 80003fc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000400:	4413      	add	r3, r2
 8000402:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 8000406:	4618      	mov	r0, r3
 8000408:	372c      	adds	r7, #44	; 0x2c
 800040a:	46bd      	mov	sp, r7
 800040c:	bcb0      	pop	{r4, r5, r7}
 800040e:	4770      	bx	lr
 8000410:	08002408 	.word	0x08002408

08000414 <number_to_string>:

void number_to_string(uint8_t num, char* buf)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	4603      	mov	r3, r0
 800041c:	6039      	str	r1, [r7, #0]
 800041e:	71fb      	strb	r3, [r7, #7]
	if(num < 10)
 8000420:	79fb      	ldrb	r3, [r7, #7]
 8000422:	2b09      	cmp	r3, #9
 8000424:	d809      	bhi.n	800043a <number_to_string+0x26>
	{
		buf[0] = '0';
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	2230      	movs	r2, #48	; 0x30
 800042a:	701a      	strb	r2, [r3, #0]
		buf[1] = num + 48;			//ASCII Value
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	3301      	adds	r3, #1
 8000430:	79fa      	ldrb	r2, [r7, #7]
 8000432:	3230      	adds	r2, #48	; 0x30
 8000434:	b2d2      	uxtb	r2, r2
 8000436:	701a      	strb	r2, [r3, #0]
	else if(num >= 10 && num < 99)
	{
		buf[0] = (num / 10) + 48;
		buf[1] = (num % 10) + 48;
	}
}
 8000438:	e01f      	b.n	800047a <number_to_string+0x66>
	else if(num >= 10 && num < 99)
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	2b09      	cmp	r3, #9
 800043e:	d91c      	bls.n	800047a <number_to_string+0x66>
 8000440:	79fb      	ldrb	r3, [r7, #7]
 8000442:	2b62      	cmp	r3, #98	; 0x62
 8000444:	d819      	bhi.n	800047a <number_to_string+0x66>
		buf[0] = (num / 10) + 48;
 8000446:	79fb      	ldrb	r3, [r7, #7]
 8000448:	4a0e      	ldr	r2, [pc, #56]	; (8000484 <number_to_string+0x70>)
 800044a:	fba2 2303 	umull	r2, r3, r2, r3
 800044e:	08db      	lsrs	r3, r3, #3
 8000450:	b2db      	uxtb	r3, r3
 8000452:	3330      	adds	r3, #48	; 0x30
 8000454:	b2da      	uxtb	r2, r3
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	701a      	strb	r2, [r3, #0]
		buf[1] = (num % 10) + 48;
 800045a:	79fa      	ldrb	r2, [r7, #7]
 800045c:	4b09      	ldr	r3, [pc, #36]	; (8000484 <number_to_string+0x70>)
 800045e:	fba3 1302 	umull	r1, r3, r3, r2
 8000462:	08d9      	lsrs	r1, r3, #3
 8000464:	460b      	mov	r3, r1
 8000466:	009b      	lsls	r3, r3, #2
 8000468:	440b      	add	r3, r1
 800046a:	005b      	lsls	r3, r3, #1
 800046c:	1ad3      	subs	r3, r2, r3
 800046e:	b2da      	uxtb	r2, r3
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	3301      	adds	r3, #1
 8000474:	3230      	adds	r2, #48	; 0x30
 8000476:	b2d2      	uxtb	r2, r2
 8000478:	701a      	strb	r2, [r3, #0]
}
 800047a:	bf00      	nop
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr
 8000484:	cccccccd 	.word	0xcccccccd

08000488 <time_to_string>:

//TIME => HH:MM:SS
char* time_to_string(RTC_time_t *rtc_time)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2] = ':';
 8000490:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <time_to_string+0x48>)
 8000492:	223a      	movs	r2, #58	; 0x3a
 8000494:	709a      	strb	r2, [r3, #2]
	buf[5] = ':';
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <time_to_string+0x48>)
 8000498:	223a      	movs	r2, #58	; 0x3a
 800049a:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_time->hours, buf);   //buf = buf[0]
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	789b      	ldrb	r3, [r3, #2]
 80004a0:	490b      	ldr	r1, [pc, #44]	; (80004d0 <time_to_string+0x48>)
 80004a2:	4618      	mov	r0, r3
 80004a4:	f7ff ffb6 	bl	8000414 <number_to_string>
	number_to_string(rtc_time->hours, &buf[3]);
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	789b      	ldrb	r3, [r3, #2]
 80004ac:	4909      	ldr	r1, [pc, #36]	; (80004d4 <time_to_string+0x4c>)
 80004ae:	4618      	mov	r0, r3
 80004b0:	f7ff ffb0 	bl	8000414 <number_to_string>
	number_to_string(rtc_time->hours, &buf[6]);
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	789b      	ldrb	r3, [r3, #2]
 80004b8:	4907      	ldr	r1, [pc, #28]	; (80004d8 <time_to_string+0x50>)
 80004ba:	4618      	mov	r0, r3
 80004bc:	f7ff ffaa 	bl	8000414 <number_to_string>
	buf[8] = '\0';
 80004c0:	4b03      	ldr	r3, [pc, #12]	; (80004d0 <time_to_string+0x48>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	721a      	strb	r2, [r3, #8]

	return buf;
 80004c6:	4b02      	ldr	r3, [pc, #8]	; (80004d0 <time_to_string+0x48>)
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	3708      	adds	r7, #8
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	2000009c 	.word	0x2000009c
 80004d4:	2000009f 	.word	0x2000009f
 80004d8:	200000a2 	.word	0x200000a2

080004dc <date_to_string>:

//DATE => DD/MM/YY
char* date_to_string(RTC_date_t *rtc_date)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2] = '/';
 80004e4:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <date_to_string+0x48>)
 80004e6:	222f      	movs	r2, #47	; 0x2f
 80004e8:	709a      	strb	r2, [r3, #2]
	buf[5] = '/';
 80004ea:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <date_to_string+0x48>)
 80004ec:	222f      	movs	r2, #47	; 0x2f
 80004ee:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_date->date, buf);  	 //buf = &buf[0]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	490b      	ldr	r1, [pc, #44]	; (8000524 <date_to_string+0x48>)
 80004f6:	4618      	mov	r0, r3
 80004f8:	f7ff ff8c 	bl	8000414 <number_to_string>
	number_to_string(rtc_date->month, &buf[3]);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	785b      	ldrb	r3, [r3, #1]
 8000500:	4909      	ldr	r1, [pc, #36]	; (8000528 <date_to_string+0x4c>)
 8000502:	4618      	mov	r0, r3
 8000504:	f7ff ff86 	bl	8000414 <number_to_string>
	number_to_string(rtc_date->year, &buf[6]);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	789b      	ldrb	r3, [r3, #2]
 800050c:	4907      	ldr	r1, [pc, #28]	; (800052c <date_to_string+0x50>)
 800050e:	4618      	mov	r0, r3
 8000510:	f7ff ff80 	bl	8000414 <number_to_string>

	buf[8] = '\0';
 8000514:	4b03      	ldr	r3, [pc, #12]	; (8000524 <date_to_string+0x48>)
 8000516:	2200      	movs	r2, #0
 8000518:	721a      	strb	r2, [r3, #8]

	return buf;
 800051a:	4b02      	ldr	r3, [pc, #8]	; (8000524 <date_to_string+0x48>)
}
 800051c:	4618      	mov	r0, r3
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	200000a8 	.word	0x200000a8
 8000528:	200000ab 	.word	0x200000ab
 800052c:	200000ae 	.word	0x200000ae

08000530 <delay_ms>:

static void delay_ms(uint32_t cnt)
{
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0; i < (cnt * 1000); i++);
 8000538:	2300      	movs	r3, #0
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	e002      	b.n	8000544 <delay_ms+0x14>
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	3301      	adds	r3, #1
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800054a:	fb02 f303 	mul.w	r3, r2, r3
 800054e:	68fa      	ldr	r2, [r7, #12]
 8000550:	429a      	cmp	r2, r3
 8000552:	d3f4      	bcc.n	800053e <delay_ms+0xe>
}
 8000554:	bf00      	nop
 8000556:	bf00      	nop
 8000558:	3714      	adds	r7, #20
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr

08000560 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <ITM_SendChar+0x44>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a0d      	ldr	r2, [pc, #52]	; (80005a4 <ITM_SendChar+0x44>)
 8000570:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000574:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000576:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <ITM_SendChar+0x48>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a0b      	ldr	r2, [pc, #44]	; (80005a8 <ITM_SendChar+0x48>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000582:	bf00      	nop
 8000584:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	2b00      	cmp	r3, #0
 8000590:	d0f8      	beq.n	8000584 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000592:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	6013      	str	r3, [r2, #0]
}
 800059a:	bf00      	nop
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr
 80005a4:	e000edfc 	.word	0xe000edfc
 80005a8:	e0000e00 	.word	0xe0000e00

080005ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
 80005bc:	e00a      	b.n	80005d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005be:	f3af 8000 	nop.w
 80005c2:	4601      	mov	r1, r0
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	1c5a      	adds	r2, r3, #1
 80005c8:	60ba      	str	r2, [r7, #8]
 80005ca:	b2ca      	uxtb	r2, r1
 80005cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	3301      	adds	r3, #1
 80005d2:	617b      	str	r3, [r7, #20]
 80005d4:	697a      	ldr	r2, [r7, #20]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	429a      	cmp	r2, r3
 80005da:	dbf0      	blt.n	80005be <_read+0x12>
	}

return len;
 80005dc:	687b      	ldr	r3, [r7, #4]
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3718      	adds	r7, #24
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b086      	sub	sp, #24
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	60f8      	str	r0, [r7, #12]
 80005ee:	60b9      	str	r1, [r7, #8]
 80005f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]
 80005f6:	e009      	b.n	800060c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	1c5a      	adds	r2, r3, #1
 80005fc:	60ba      	str	r2, [r7, #8]
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	4618      	mov	r0, r3
 8000602:	f7ff ffad 	bl	8000560 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	3301      	adds	r3, #1
 800060a:	617b      	str	r3, [r7, #20]
 800060c:	697a      	ldr	r2, [r7, #20]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	429a      	cmp	r2, r3
 8000612:	dbf1      	blt.n	80005f8 <_write+0x12>
	}
	return len;
 8000614:	687b      	ldr	r3, [r7, #4]
}
 8000616:	4618      	mov	r0, r3
 8000618:	3718      	adds	r7, #24
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <_close>:

int _close(int file)
{
 800061e:	b480      	push	{r7}
 8000620:	b083      	sub	sp, #12
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
	return -1;
 8000626:	f04f 33ff 	mov.w	r3, #4294967295
}
 800062a:	4618      	mov	r0, r3
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr

08000634 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000644:	605a      	str	r2, [r3, #4]
	return 0;
 8000646:	2300      	movs	r3, #0
}
 8000648:	4618      	mov	r0, r3
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr

08000652 <_isatty>:

int _isatty(int file)
{
 8000652:	b480      	push	{r7}
 8000654:	b083      	sub	sp, #12
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
	return 1;
 800065a:	2301      	movs	r3, #1
}
 800065c:	4618      	mov	r0, r3
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr

08000666 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000666:	b480      	push	{r7}
 8000668:	b085      	sub	sp, #20
 800066a:	af00      	add	r7, sp, #0
 800066c:	60f8      	str	r0, [r7, #12]
 800066e:	60b9      	str	r1, [r7, #8]
 8000670:	607a      	str	r2, [r7, #4]
	return 0;
 8000672:	2300      	movs	r3, #0
}
 8000674:	4618      	mov	r0, r3
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr
	...

08000680 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000688:	4a14      	ldr	r2, [pc, #80]	; (80006dc <_sbrk+0x5c>)
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <_sbrk+0x60>)
 800068c:	1ad3      	subs	r3, r2, r3
 800068e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000694:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <_sbrk+0x64>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d102      	bne.n	80006a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <_sbrk+0x64>)
 800069e:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <_sbrk+0x68>)
 80006a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <_sbrk+0x64>)
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4413      	add	r3, r2
 80006aa:	693a      	ldr	r2, [r7, #16]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d207      	bcs.n	80006c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006b0:	f001 f980 	bl	80019b4 <__errno>
 80006b4:	4603      	mov	r3, r0
 80006b6:	220c      	movs	r2, #12
 80006b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295
 80006be:	e009      	b.n	80006d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006c0:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <_sbrk+0x64>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006c6:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <_sbrk+0x64>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4413      	add	r3, r2
 80006ce:	4a05      	ldr	r2, [pc, #20]	; (80006e4 <_sbrk+0x64>)
 80006d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006d2:	68fb      	ldr	r3, [r7, #12]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3718      	adds	r7, #24
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20020000 	.word	0x20020000
 80006e0:	00000400 	.word	0x00000400
 80006e4:	200000b4 	.word	0x200000b4
 80006e8:	200000f8 	.word	0x200000f8

080006ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006ec:	480d      	ldr	r0, [pc, #52]	; (8000724 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ee:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f4:	480c      	ldr	r0, [pc, #48]	; (8000728 <LoopForever+0x6>)
  ldr r1, =_edata
 80006f6:	490d      	ldr	r1, [pc, #52]	; (800072c <LoopForever+0xa>)
  ldr r2, =_sidata
 80006f8:	4a0d      	ldr	r2, [pc, #52]	; (8000730 <LoopForever+0xe>)
  movs r3, #0
 80006fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006fc:	e002      	b.n	8000704 <LoopCopyDataInit>

080006fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000702:	3304      	adds	r3, #4

08000704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000708:	d3f9      	bcc.n	80006fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800070a:	4a0a      	ldr	r2, [pc, #40]	; (8000734 <LoopForever+0x12>)
  ldr r4, =_ebss
 800070c:	4c0a      	ldr	r4, [pc, #40]	; (8000738 <LoopForever+0x16>)
  movs r3, #0
 800070e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000710:	e001      	b.n	8000716 <LoopFillZerobss>

08000712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000714:	3204      	adds	r2, #4

08000716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000718:	d3fb      	bcc.n	8000712 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800071a:	f001 f951 	bl	80019c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800071e:	f7ff fd71 	bl	8000204 <main>

08000722 <LoopForever>:

LoopForever:
    b LoopForever
 8000722:	e7fe      	b.n	8000722 <LoopForever>
  ldr   r0, =_estack
 8000724:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800072c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000730:	08002490 	.word	0x08002490
  ldr r2, =_sbss
 8000734:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000738:	200000f8 	.word	0x200000f8

0800073c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800073c:	e7fe      	b.n	800073c <ADC_IRQHandler>
	...

08000740 <RTC_DS1307_Init>:
 * RTC_DS1307_Init
 * returns 1 : CH = 1 : Init Failed
 * returns 0 : CH = 0 : Init Sucess
 */
uint8_t RTC_DS1307_Init()
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
	//1. Initialize the I2C Pins
	RTC_DS1307_I2C_Pin_Config();
 8000746:	f000 f92f 	bl	80009a8 <RTC_DS1307_I2C_Pin_Config>

	//2. Initialize I2C Peripheral
	RTC_DS1307_I2C_Config();
 800074a:	f000 f967 	bl	8000a1c <RTC_DS1307_I2C_Config>

	//3. Enable I2C Peripheral
	I2C_PeripheralControl(RTC_DS1307_I2C, ENABLE);
 800074e:	2101      	movs	r1, #1
 8000750:	4809      	ldr	r0, [pc, #36]	; (8000778 <RTC_DS1307_Init+0x38>)
 8000752:	f000 ff87 	bl	8001664 <I2C_PeripheralControl>

	//4. Make Clock Halt zero(CH=0)
	RTC_DS1307_Write(0x00, RTC_DS1307_ADDR_SEC);
 8000756:	2100      	movs	r1, #0
 8000758:	2000      	movs	r0, #0
 800075a:	f000 f975 	bl	8000a48 <RTC_DS1307_Write>

	//5.Read Back Clock Halt bit
	uint8_t clock_state = RTC_DS1307_Read(RTC_DS1307_ADDR_SEC);
 800075e:	2000      	movs	r0, #0
 8000760:	f000 f98e 	bl	8000a80 <RTC_DS1307_Read>
 8000764:	4603      	mov	r3, r0
 8000766:	71fb      	strb	r3, [r7, #7]

	return ((clock_state >> 7) & 0x01);
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	09db      	lsrs	r3, r3, #7
 800076c:	b2db      	uxtb	r3, r3

}
 800076e:	4618      	mov	r0, r3
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40005400 	.word	0x40005400

0800077c <RTC_DS1307_Set_Current_Time>:

void RTC_DS1307_Set_Current_Time(RTC_time_t *rtc_time)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	uint8_t seconds, minutes, hours;

	//Set seconds Register
	seconds = Binary_to_BCD(rtc_time->seconds);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	4618      	mov	r0, r3
 800078a:	f000 f997 	bl	8000abc <Binary_to_BCD>
 800078e:	4603      	mov	r3, r0
 8000790:	73bb      	strb	r3, [r7, #14]
	seconds &= (1 << 7);	//Make Clock Halt CH=0 (Bit 7)
 8000792:	7bbb      	ldrb	r3, [r7, #14]
 8000794:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000798:	73bb      	strb	r3, [r7, #14]
	RTC_DS1307_Write(seconds, RTC_DS1307_ADDR_SEC);
 800079a:	7bbb      	ldrb	r3, [r7, #14]
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 f952 	bl	8000a48 <RTC_DS1307_Write>

	//Set Minute Register
	minutes = Binary_to_BCD(rtc_time->minutes);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	785b      	ldrb	r3, [r3, #1]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 f987 	bl	8000abc <Binary_to_BCD>
 80007ae:	4603      	mov	r3, r0
 80007b0:	737b      	strb	r3, [r7, #13]
	RTC_DS1307_Write(minutes, RTC_DS1307_ADDR_MIN);
 80007b2:	7b7b      	ldrb	r3, [r7, #13]
 80007b4:	2101      	movs	r1, #1
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 f946 	bl	8000a48 <RTC_DS1307_Write>

	//Set Hour Register
	hours = Binary_to_BCD(rtc_time->hours);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	789b      	ldrb	r3, [r3, #2]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 f97b 	bl	8000abc <Binary_to_BCD>
 80007c6:	4603      	mov	r3, r0
 80007c8:	73fb      	strb	r3, [r7, #15]

	if(rtc_time->time_format == TIME_FORMAT_24HRS)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	78db      	ldrb	r3, [r3, #3]
 80007ce:	2b02      	cmp	r3, #2
 80007d0:	d104      	bne.n	80007dc <RTC_DS1307_Set_Current_Time+0x60>
	{
		//24 Hour Time Format
		//Bit 6 of Hours register is zero
		hours &= ~(1 << 6);
 80007d2:	7bfb      	ldrb	r3, [r7, #15]
 80007d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007d8:	73fb      	strb	r3, [r7, #15]
 80007da:	e010      	b.n	80007fe <RTC_DS1307_Set_Current_Time+0x82>
	}
	else
	{
		//12 Hour Time Format
		//Bit 6 of Hours register is 1
		hours |= (1 << 6);
 80007dc:	7bfb      	ldrb	r3, [r7, #15]
 80007de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007e2:	73fb      	strb	r3, [r7, #15]

		//Check AM or PM time format
		if(rtc_time->time_format == TIME_FORMAT_12HRS_PM)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	78db      	ldrb	r3, [r3, #3]
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d104      	bne.n	80007f6 <RTC_DS1307_Set_Current_Time+0x7a>
		{
			//12 Hours PM Format
			//Set bit 5 of hour register(bit 5 = 1)
			hours |= (1 << 5);
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	f043 0320 	orr.w	r3, r3, #32
 80007f2:	73fb      	strb	r3, [r7, #15]
 80007f4:	e003      	b.n	80007fe <RTC_DS1307_Set_Current_Time+0x82>
		}
		else
		{
			//12 Hours AM Format
			//Clear bit 5 of hour register(bit 5 = 0)
			hours &= ~(1 << 5);
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	f023 0320 	bic.w	r3, r3, #32
 80007fc:	73fb      	strb	r3, [r7, #15]
		}
	}

	RTC_DS1307_Write(hours, RTC_DS1307_ADDR_HRS);
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	2102      	movs	r1, #2
 8000802:	4618      	mov	r0, r3
 8000804:	f000 f920 	bl	8000a48 <RTC_DS1307_Write>
}
 8000808:	bf00      	nop
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <RTC_DS1307_Get_Current_Time>:

void RTC_DS1307_Get_Current_Time(RTC_time_t *rtc_time)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	uint8_t seconds, minutes, hours;

	//Get Seconds
	seconds = RTC_DS1307_Read(RTC_DS1307_ADDR_SEC);
 8000818:	2000      	movs	r0, #0
 800081a:	f000 f931 	bl	8000a80 <RTC_DS1307_Read>
 800081e:	4603      	mov	r3, r0
 8000820:	73bb      	strb	r3, [r7, #14]
	seconds &= ~(1 << 7);	//Clock Halt : CH=0
 8000822:	7bbb      	ldrb	r3, [r7, #14]
 8000824:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000828:	73bb      	strb	r3, [r7, #14]
	rtc_time->seconds = BCD_to_Binary(seconds);
 800082a:	7bbb      	ldrb	r3, [r7, #14]
 800082c:	4618      	mov	r0, r3
 800082e:	f000 f971 	bl	8000b14 <BCD_to_Binary>
 8000832:	4603      	mov	r3, r0
 8000834:	461a      	mov	r2, r3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	701a      	strb	r2, [r3, #0]

	//Get Minutes
	minutes = RTC_DS1307_Read(RTC_DS1307_ADDR_MIN);
 800083a:	2001      	movs	r0, #1
 800083c:	f000 f920 	bl	8000a80 <RTC_DS1307_Read>
 8000840:	4603      	mov	r3, r0
 8000842:	737b      	strb	r3, [r7, #13]
	rtc_time->minutes = BCD_to_Binary(minutes);
 8000844:	7b7b      	ldrb	r3, [r7, #13]
 8000846:	4618      	mov	r0, r3
 8000848:	f000 f964 	bl	8000b14 <BCD_to_Binary>
 800084c:	4603      	mov	r3, r0
 800084e:	461a      	mov	r2, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	705a      	strb	r2, [r3, #1]

	//Get Hour
	hours = RTC_DS1307_Read(RTC_DS1307_ADDR_HRS);
 8000854:	2002      	movs	r0, #2
 8000856:	f000 f913 	bl	8000a80 <RTC_DS1307_Read>
 800085a:	4603      	mov	r3, r0
 800085c:	73fb      	strb	r3, [r7, #15]

	//Check Time Format : Bit 6 of Hour Register
	if(hours & (1 << 6))
 800085e:	7bfb      	ldrb	r3, [r7, #15]
 8000860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000864:	2b00      	cmp	r3, #0
 8000866:	d01c      	beq.n	80008a2 <RTC_DS1307_Get_Current_Time+0x92>
	{
		//12 Hour Format
		//Check AM or PM : Bit 5 of Hour Register
		if(hours & (1 << 5))
 8000868:	7bfb      	ldrb	r3, [r7, #15]
 800086a:	f003 0320 	and.w	r3, r3, #32
 800086e:	2b00      	cmp	r3, #0
 8000870:	d00b      	beq.n	800088a <RTC_DS1307_Get_Current_Time+0x7a>
		{
			//12 Hours time format : PM
			rtc_time->time_format = TIME_FORMAT_12HRS_PM;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2201      	movs	r2, #1
 8000876:	70da      	strb	r2, [r3, #3]
			hours &= ~(1 << 5);
 8000878:	7bfb      	ldrb	r3, [r7, #15]
 800087a:	f023 0320 	bic.w	r3, r3, #32
 800087e:	73fb      	strb	r3, [r7, #15]
			hours &= ~(1 << 6);
 8000880:	7bfb      	ldrb	r3, [r7, #15]
 8000882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000886:	73fb      	strb	r3, [r7, #15]
 8000888:	e00e      	b.n	80008a8 <RTC_DS1307_Get_Current_Time+0x98>
		}
		else
		{
			//12 Hours time format : AM
			rtc_time->time_format = TIME_FORMAT_12HRS_AM;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2200      	movs	r2, #0
 800088e:	70da      	strb	r2, [r3, #3]
			hours &= ~(1 << 5);
 8000890:	7bfb      	ldrb	r3, [r7, #15]
 8000892:	f023 0320 	bic.w	r3, r3, #32
 8000896:	73fb      	strb	r3, [r7, #15]
			hours &= ~(1 << 6);
 8000898:	7bfb      	ldrb	r3, [r7, #15]
 800089a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800089e:	73fb      	strb	r3, [r7, #15]
 80008a0:	e002      	b.n	80008a8 <RTC_DS1307_Get_Current_Time+0x98>
		}
	}
	else
	{
		//24 Hour Format
		rtc_time->time_format = TIME_FORMAT_24HRS;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2202      	movs	r2, #2
 80008a6:	70da      	strb	r2, [r3, #3]
	}

	rtc_time->hours = BCD_to_Binary(hours);
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 f932 	bl	8000b14 <BCD_to_Binary>
 80008b0:	4603      	mov	r3, r0
 80008b2:	461a      	mov	r2, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	709a      	strb	r2, [r3, #2]

}
 80008b8:	bf00      	nop
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <RTC_DS1307_Set_Current_Date>:

void RTC_DS1307_Set_Current_Date(RTC_date_t *rtc_date)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	uint8_t day, date, month, year;

	//Set Date Register
	date = Binary_to_BCD(rtc_date->date);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f000 f8f5 	bl	8000abc <Binary_to_BCD>
 80008d2:	4603      	mov	r3, r0
 80008d4:	73fb      	strb	r3, [r7, #15]
	RTC_DS1307_Write(date, RTC_DS1307_ADDR_DATE);
 80008d6:	7bfb      	ldrb	r3, [r7, #15]
 80008d8:	2104      	movs	r1, #4
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 f8b4 	bl	8000a48 <RTC_DS1307_Write>

	//Set Month Register
	month = Binary_to_BCD(rtc_date->month);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	785b      	ldrb	r3, [r3, #1]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 f8e9 	bl	8000abc <Binary_to_BCD>
 80008ea:	4603      	mov	r3, r0
 80008ec:	73bb      	strb	r3, [r7, #14]
	RTC_DS1307_Write(month, RTC_DS1307_ADDR_MONTH);
 80008ee:	7bbb      	ldrb	r3, [r7, #14]
 80008f0:	2105      	movs	r1, #5
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 f8a8 	bl	8000a48 <RTC_DS1307_Write>

	//Set Year Register
	year = Binary_to_BCD(rtc_date->year);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	789b      	ldrb	r3, [r3, #2]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f000 f8dd 	bl	8000abc <Binary_to_BCD>
 8000902:	4603      	mov	r3, r0
 8000904:	737b      	strb	r3, [r7, #13]
	RTC_DS1307_Write(year, RTC_DS1307_ADDR_YEAR);
 8000906:	7b7b      	ldrb	r3, [r7, #13]
 8000908:	2106      	movs	r1, #6
 800090a:	4618      	mov	r0, r3
 800090c:	f000 f89c 	bl	8000a48 <RTC_DS1307_Write>

	//Set Day Register
	day = Binary_to_BCD(rtc_date->day);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	78db      	ldrb	r3, [r3, #3]
 8000914:	4618      	mov	r0, r3
 8000916:	f000 f8d1 	bl	8000abc <Binary_to_BCD>
 800091a:	4603      	mov	r3, r0
 800091c:	733b      	strb	r3, [r7, #12]
	RTC_DS1307_Write(day, RTC_DS1307_ADDR_DAY);
 800091e:	7b3b      	ldrb	r3, [r7, #12]
 8000920:	2103      	movs	r1, #3
 8000922:	4618      	mov	r0, r3
 8000924:	f000 f890 	bl	8000a48 <RTC_DS1307_Write>

}
 8000928:	bf00      	nop
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <RTC_DS1307_Get_Current_Date>:

void RTC_DS1307_Get_Current_Date(RTC_date_t *rtc_date)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	uint8_t day, date, month, year;

	//Get Date
	date = RTC_DS1307_Read(RTC_DS1307_ADDR_DATE);
 8000938:	2004      	movs	r0, #4
 800093a:	f000 f8a1 	bl	8000a80 <RTC_DS1307_Read>
 800093e:	4603      	mov	r3, r0
 8000940:	73fb      	strb	r3, [r7, #15]
	rtc_date->date = BCD_to_Binary(date);
 8000942:	7bfb      	ldrb	r3, [r7, #15]
 8000944:	4618      	mov	r0, r3
 8000946:	f000 f8e5 	bl	8000b14 <BCD_to_Binary>
 800094a:	4603      	mov	r3, r0
 800094c:	461a      	mov	r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	701a      	strb	r2, [r3, #0]

	//Get Month
	month = RTC_DS1307_Read(RTC_DS1307_ADDR_MONTH);
 8000952:	2005      	movs	r0, #5
 8000954:	f000 f894 	bl	8000a80 <RTC_DS1307_Read>
 8000958:	4603      	mov	r3, r0
 800095a:	73bb      	strb	r3, [r7, #14]
	rtc_date->month = BCD_to_Binary(month);
 800095c:	7bbb      	ldrb	r3, [r7, #14]
 800095e:	4618      	mov	r0, r3
 8000960:	f000 f8d8 	bl	8000b14 <BCD_to_Binary>
 8000964:	4603      	mov	r3, r0
 8000966:	461a      	mov	r2, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	705a      	strb	r2, [r3, #1]

	//Get Year
	year = RTC_DS1307_Read(RTC_DS1307_ADDR_YEAR);
 800096c:	2006      	movs	r0, #6
 800096e:	f000 f887 	bl	8000a80 <RTC_DS1307_Read>
 8000972:	4603      	mov	r3, r0
 8000974:	737b      	strb	r3, [r7, #13]
	rtc_date->year = BCD_to_Binary(year);
 8000976:	7b7b      	ldrb	r3, [r7, #13]
 8000978:	4618      	mov	r0, r3
 800097a:	f000 f8cb 	bl	8000b14 <BCD_to_Binary>
 800097e:	4603      	mov	r3, r0
 8000980:	461a      	mov	r2, r3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	709a      	strb	r2, [r3, #2]

	//Get Day
	day = RTC_DS1307_Read(RTC_DS1307_ADDR_DAY);
 8000986:	2003      	movs	r0, #3
 8000988:	f000 f87a 	bl	8000a80 <RTC_DS1307_Read>
 800098c:	4603      	mov	r3, r0
 800098e:	733b      	strb	r3, [r7, #12]
	rtc_date->day = BCD_to_Binary(day);
 8000990:	7b3b      	ldrb	r3, [r7, #12]
 8000992:	4618      	mov	r0, r3
 8000994:	f000 f8be 	bl	8000b14 <BCD_to_Binary>
 8000998:	4603      	mov	r3, r0
 800099a:	461a      	mov	r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	70da      	strb	r2, [r3, #3]

}
 80009a0:	bf00      	nop
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <RTC_DS1307_I2C_Pin_Config>:

static void RTC_DS1307_I2C_Pin_Config(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0
	GPIO_Handle_t i2c_sda, i2c_scl;

	memset(&i2c_scl, 0, sizeof(i2c_scl));
 80009ae:	463b      	mov	r3, r7
 80009b0:	220c      	movs	r2, #12
 80009b2:	2100      	movs	r1, #0
 80009b4:	4618      	mov	r0, r3
 80009b6:	f001 f827 	bl	8001a08 <memset>
	memset(&i2c_scl, 0, sizeof(i2c_scl));
 80009ba:	463b      	mov	r3, r7
 80009bc:	220c      	movs	r2, #12
 80009be:	2100      	movs	r1, #0
 80009c0:	4618      	mov	r0, r3
 80009c2:	f001 f821 	bl	8001a08 <memset>

	/*
	 * I2C_SCL	=> PB6
	 * i2c_scl	=> PB7
	 */
	i2c_sda.pGPIOx = RTC_DS1307_I2C_GPIO_PORT;	//GPIOB
 80009c6:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <RTC_DS1307_I2C_Pin_Config+0x70>)
 80009c8:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = RTC_DS1307_I2C_SDA_PIN;
 80009ca:	2307      	movs	r3, #7
 80009cc:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALT_FN;
 80009ce:	2302      	movs	r3, #2
 80009d0:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80009d2:	2304      	movs	r3, #4
 80009d4:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinOType = GPIO_OP_TYPE_OD;
 80009d6:	2301      	movs	r3, #1
 80009d8:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PuPdControl = GPIO_PIN_PU;
 80009da:	2301      	movs	r3, #1
 80009dc:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80009de:	2302      	movs	r3, #2
 80009e0:	74bb      	strb	r3, [r7, #18]

	GPIO_Init(&i2c_sda);
 80009e2:	f107 030c 	add.w	r3, r7, #12
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 fb1e 	bl	8001028 <GPIO_Init>

	i2c_scl.pGPIOx = RTC_DS1307_I2C_GPIO_PORT;	//GPIOB
 80009ec:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <RTC_DS1307_I2C_Pin_Config+0x70>)
 80009ee:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = RTC_DS1307_I2C_SCL_PIN;
 80009f0:	2306      	movs	r3, #6
 80009f2:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALT_FN;
 80009f4:	2302      	movs	r3, #2
 80009f6:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80009f8:	2304      	movs	r3, #4
 80009fa:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConfig.GPIO_PinOType = GPIO_OP_TYPE_OD;
 80009fc:	2301      	movs	r3, #1
 80009fe:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PinConfig.GPIO_PuPdControl = GPIO_PIN_PU;
 8000a00:	2301      	movs	r3, #1
 8000a02:	71fb      	strb	r3, [r7, #7]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000a04:	2302      	movs	r3, #2
 8000a06:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(&i2c_scl);
 8000a08:	463b      	mov	r3, r7
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 fb0c 	bl	8001028 <GPIO_Init>
}
 8000a10:	bf00      	nop
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40020400 	.word	0x40020400

08000a1c <RTC_DS1307_I2C_Config>:

static void RTC_DS1307_I2C_Config(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	RTC_I2CHandle.pI2Cx = RTC_DS1307_I2C;	//I2C1
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <RTC_DS1307_I2C_Config+0x20>)
 8000a22:	4a07      	ldr	r2, [pc, #28]	; (8000a40 <RTC_DS1307_I2C_Config+0x24>)
 8000a24:	601a      	str	r2, [r3, #0]
	RTC_I2CHandle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 8000a26:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <RTC_DS1307_I2C_Config+0x20>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	725a      	strb	r2, [r3, #9]
	RTC_I2CHandle.I2C_Config.I2C_SCLSpeed = RTC_DS1307_I2C_SPEED;
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <RTC_DS1307_I2C_Config+0x20>)
 8000a2e:	4a05      	ldr	r2, [pc, #20]	; (8000a44 <RTC_DS1307_I2C_Config+0x28>)
 8000a30:	605a      	str	r2, [r3, #4]

	I2C_Init(&RTC_I2CHandle);
 8000a32:	4802      	ldr	r0, [pc, #8]	; (8000a3c <RTC_DS1307_I2C_Config+0x20>)
 8000a34:	f000 fd86 	bl	8001544 <I2C_Init>
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	200000c0 	.word	0x200000c0
 8000a40:	40005400 	.word	0x40005400
 8000a44:	000186a0 	.word	0x000186a0

08000a48 <RTC_DS1307_Write>:

static void RTC_DS1307_Write(uint8_t value, uint8_t reg_addr)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af02      	add	r7, sp, #8
 8000a4e:	4603      	mov	r3, r0
 8000a50:	460a      	mov	r2, r1
 8000a52:	71fb      	strb	r3, [r7, #7]
 8000a54:	4613      	mov	r3, r2
 8000a56:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];
	tx[0] = reg_addr;
 8000a58:	79bb      	ldrb	r3, [r7, #6]
 8000a5a:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	737b      	strb	r3, [r7, #13]
	I2C_MasterSendData(&RTC_I2CHandle, tx, 2, RTC_DS1307_I2C_ADDRESS, 0);
 8000a60:	f107 010c 	add.w	r1, r7, #12
 8000a64:	2300      	movs	r3, #0
 8000a66:	9300      	str	r3, [sp, #0]
 8000a68:	2368      	movs	r3, #104	; 0x68
 8000a6a:	2202      	movs	r2, #2
 8000a6c:	4803      	ldr	r0, [pc, #12]	; (8000a7c <RTC_DS1307_Write+0x34>)
 8000a6e:	f000 fe42 	bl	80016f6 <I2C_MasterSendData>
}
 8000a72:	bf00      	nop
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	200000c0 	.word	0x200000c0

08000a80 <RTC_DS1307_Read>:

static uint8_t RTC_DS1307_Read(uint8_t reg_addr)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af02      	add	r7, sp, #8
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	I2C_MasterSendData(&RTC_I2CHandle, &reg_addr, 1, RTC_DS1307_I2C_ADDRESS, 0);
 8000a8a:	1df9      	adds	r1, r7, #7
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	2368      	movs	r3, #104	; 0x68
 8000a92:	2201      	movs	r2, #1
 8000a94:	4808      	ldr	r0, [pc, #32]	; (8000ab8 <RTC_DS1307_Read+0x38>)
 8000a96:	f000 fe2e 	bl	80016f6 <I2C_MasterSendData>
	I2C_MasterReceiveData(&RTC_I2CHandle, &data, 1, RTC_DS1307_I2C_ADDRESS, 0);
 8000a9a:	f107 010f 	add.w	r1, r7, #15
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	2368      	movs	r3, #104	; 0x68
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <RTC_DS1307_Read+0x38>)
 8000aa8:	f000 fe8c 	bl	80017c4 <I2C_MasterReceiveData>
	return data;
 8000aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200000c0 	.word	0x200000c0

08000abc <Binary_to_BCD>:

static uint8_t Binary_to_BCD(uint8_t value)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
	uint8_t m, n, bcd;

	bcd = value;		//If value < 10 then bcd = value
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	73fb      	strb	r3, [r7, #15]

	if(value >= 10)
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	2b09      	cmp	r3, #9
 8000ace:	d918      	bls.n	8000b02 <Binary_to_BCD+0x46>
	{
		m = value / 10;
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	4a0f      	ldr	r2, [pc, #60]	; (8000b10 <Binary_to_BCD+0x54>)
 8000ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad8:	08db      	lsrs	r3, r3, #3
 8000ada:	73bb      	strb	r3, [r7, #14]
		n = value % 10;
 8000adc:	79fa      	ldrb	r2, [r7, #7]
 8000ade:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <Binary_to_BCD+0x54>)
 8000ae0:	fba3 1302 	umull	r1, r3, r3, r2
 8000ae4:	08d9      	lsrs	r1, r3, #3
 8000ae6:	460b      	mov	r3, r1
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	440b      	add	r3, r1
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	1ad3      	subs	r3, r2, r3
 8000af0:	737b      	strb	r3, [r7, #13]
		bcd = (uint8_t)((m << 4) | n);
 8000af2:	7bbb      	ldrb	r3, [r7, #14]
 8000af4:	011b      	lsls	r3, r3, #4
 8000af6:	b25a      	sxtb	r2, r3
 8000af8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	b25b      	sxtb	r3, r3
 8000b00:	73fb      	strb	r3, [r7, #15]
	}

	return bcd;
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	cccccccd 	.word	0xcccccccd

08000b14 <BCD_to_Binary>:

static uint8_t BCD_to_Binary(uint8_t value)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
	uint8_t m, n, binary;

	m = (uint8_t) ((value >> 4) * 10);
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	091b      	lsrs	r3, r3, #4
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	461a      	mov	r2, r3
 8000b26:	0092      	lsls	r2, r2, #2
 8000b28:	4413      	add	r3, r2
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	73fb      	strb	r3, [r7, #15]
	n = value & (uint8_t)0x0F;
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	f003 030f 	and.w	r3, r3, #15
 8000b34:	73bb      	strb	r3, [r7, #14]
	binary = m + n;
 8000b36:	7bfa      	ldrb	r2, [r7, #15]
 8000b38:	7bbb      	ldrb	r3, [r7, #14]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	737b      	strb	r3, [r7, #13]

	return binary;
 8000b3e:	7b7b      	ldrb	r3, [r7, #13]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr
	...

08000b4c <LCD_Init>:
static void LCD_Enable(void);
static void delay_ms(uint32_t cnt);
static void delay_us(uint32_t cnt);

void LCD_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
	//1. Configure GPIO Pins which are used for LCD Connection
	LCD_GPIO_Pin_Config();
 8000b50:	f000 f82e 	bl	8000bb0 <LCD_GPIO_Pin_Config>

	//2. LCD Initialization
	delay_ms(40);
 8000b54:	2028      	movs	r0, #40	; 0x28
 8000b56:	f000 f96a 	bl	8000e2e <delay_ms>

	/*RS=0 for LCD Command */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4813      	ldr	r0, [pc, #76]	; (8000bac <LCD_Init+0x60>)
 8000b60:	f000 fbb4 	bl	80012cc <GPIO_WriteToOutputPin>

	/*R/nW=0 for LCD Write */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2101      	movs	r1, #1
 8000b68:	4810      	ldr	r0, [pc, #64]	; (8000bac <LCD_Init+0x60>)
 8000b6a:	f000 fbaf 	bl	80012cc <GPIO_WriteToOutputPin>

	LCD_Write_4bits(0x3);
 8000b6e:	2003      	movs	r0, #3
 8000b70:	f000 f87e 	bl	8000c70 <LCD_Write_4bits>
	delay_ms(5);
 8000b74:	2005      	movs	r0, #5
 8000b76:	f000 f95a 	bl	8000e2e <delay_ms>

	LCD_Write_4bits(0x3);
 8000b7a:	2003      	movs	r0, #3
 8000b7c:	f000 f878 	bl	8000c70 <LCD_Write_4bits>
	delay_us(150);
 8000b80:	2096      	movs	r0, #150	; 0x96
 8000b82:	f000 f96c 	bl	8000e5e <delay_us>

	LCD_Write_4bits(0x3);
 8000b86:	2003      	movs	r0, #3
 8000b88:	f000 f872 	bl	8000c70 <LCD_Write_4bits>
	LCD_Write_4bits(0x2);
 8000b8c:	2002      	movs	r0, #2
 8000b8e:	f000 f86f 	bl	8000c70 <LCD_Write_4bits>

	//Function Set Command
	LCD_Send_Command(LCD_CMD_4DL_2N_5X8F);
 8000b92:	2028      	movs	r0, #40	; 0x28
 8000b94:	f000 f8a4 	bl	8000ce0 <LCD_Send_Command>

	//Display ON/OFF Control
	LCD_Send_Command(LCD_CMD_DON_CURON);
 8000b98:	200e      	movs	r0, #14
 8000b9a:	f000 f8a1 	bl	8000ce0 <LCD_Send_Command>

	//Display Clear Command
	LCD_Display_Clear();
 8000b9e:	f000 f90f 	bl	8000dc0 <LCD_Display_Clear>

	//Entry mode set
	LCD_Send_Command(LCD_CMD_INCADD);
 8000ba2:	2006      	movs	r0, #6
 8000ba4:	f000 f89c 	bl	8000ce0 <LCD_Send_Command>

}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40020c00 	.word	0x40020c00

08000bb0 <LCD_GPIO_Pin_Config>:

void LCD_GPIO_Pin_Config()
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
	GPIO_Handle_t lcd_signal;

	lcd_signal.pGPIOx = LCD_GPIO_PORT;
 8000bb6:	4b2d      	ldr	r3, [pc, #180]	; (8000c6c <LCD_GPIO_Pin_Config+0xbc>)
 8000bb8:	607b      	str	r3, [r7, #4]
	lcd_signal.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	727b      	strb	r3, [r7, #9]
	lcd_signal.GPIO_PinConfig.GPIO_PinOType = GPIO_OP_TYPE_PP;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	733b      	strb	r3, [r7, #12]
	lcd_signal.GPIO_PinConfig.GPIO_PuPdControl = GPIO_NO_PUPD;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	72fb      	strb	r3, [r7, #11]
	lcd_signal.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	72bb      	strb	r3, [r7, #10]

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RS;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f000 fa29 	bl	8001028 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RW;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f000 fa23 	bl	8001028 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_EN;
 8000be2:	2302      	movs	r3, #2
 8000be4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	4618      	mov	r0, r3
 8000bea:	f000 fa1d 	bl	8001028 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D4;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f000 fa17 	bl	8001028 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D5;
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 fa11 	bl	8001028 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D6;
 8000c06:	2305      	movs	r3, #5
 8000c08:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f000 fa0b 	bl	8001028 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D7;
 8000c12:	2306      	movs	r3, #6
 8000c14:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 fa05 	bl	8001028 <GPIO_Init>

	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2100      	movs	r1, #0
 8000c22:	4812      	ldr	r0, [pc, #72]	; (8000c6c <LCD_GPIO_Pin_Config+0xbc>)
 8000c24:	f000 fb52 	bl	80012cc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	480f      	ldr	r0, [pc, #60]	; (8000c6c <LCD_GPIO_Pin_Config+0xbc>)
 8000c2e:	f000 fb4d 	bl	80012cc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2102      	movs	r1, #2
 8000c36:	480d      	ldr	r0, [pc, #52]	; (8000c6c <LCD_GPIO_Pin_Config+0xbc>)
 8000c38:	f000 fb48 	bl	80012cc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, GPIO_PIN_RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2103      	movs	r1, #3
 8000c40:	480a      	ldr	r0, [pc, #40]	; (8000c6c <LCD_GPIO_Pin_Config+0xbc>)
 8000c42:	f000 fb43 	bl	80012cc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2104      	movs	r1, #4
 8000c4a:	4808      	ldr	r0, [pc, #32]	; (8000c6c <LCD_GPIO_Pin_Config+0xbc>)
 8000c4c:	f000 fb3e 	bl	80012cc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2105      	movs	r1, #5
 8000c54:	4805      	ldr	r0, [pc, #20]	; (8000c6c <LCD_GPIO_Pin_Config+0xbc>)
 8000c56:	f000 fb39 	bl	80012cc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2106      	movs	r1, #6
 8000c5e:	4803      	ldr	r0, [pc, #12]	; (8000c6c <LCD_GPIO_Pin_Config+0xbc>)
 8000c60:	f000 fb34 	bl	80012cc <GPIO_WriteToOutputPin>

}
 8000c64:	bf00      	nop
 8000c66:	3710      	adds	r7, #16
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40020c00 	.word	0x40020c00

08000c70 <LCD_Write_4bits>:

/* Writes 4 bits of data/command on tp  D4 D5 D6 D7 lines*/
//Shift data to LSB position
static void LCD_Write_4bits(uint8_t value)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, ((value >> 0) & 0x1));
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	461a      	mov	r2, r3
 8000c84:	2103      	movs	r1, #3
 8000c86:	4815      	ldr	r0, [pc, #84]	; (8000cdc <LCD_Write_4bits+0x6c>)
 8000c88:	f000 fb20 	bl	80012cc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, ((value >> 1) & 0x1));
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	085b      	lsrs	r3, r3, #1
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	461a      	mov	r2, r3
 8000c9a:	2104      	movs	r1, #4
 8000c9c:	480f      	ldr	r0, [pc, #60]	; (8000cdc <LCD_Write_4bits+0x6c>)
 8000c9e:	f000 fb15 	bl	80012cc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, ((value >> 2) & 0x1));
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	089b      	lsrs	r3, r3, #2
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	f003 0301 	and.w	r3, r3, #1
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	461a      	mov	r2, r3
 8000cb0:	2105      	movs	r1, #5
 8000cb2:	480a      	ldr	r0, [pc, #40]	; (8000cdc <LCD_Write_4bits+0x6c>)
 8000cb4:	f000 fb0a 	bl	80012cc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, ((value >> 3) & 0x1));
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	08db      	lsrs	r3, r3, #3
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	2106      	movs	r1, #6
 8000cc8:	4804      	ldr	r0, [pc, #16]	; (8000cdc <LCD_Write_4bits+0x6c>)
 8000cca:	f000 faff 	bl	80012cc <GPIO_WriteToOutputPin>

	LCD_Enable();
 8000cce:	f000 f861 	bl	8000d94 <LCD_Enable>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40020c00 	.word	0x40020c00

08000ce0 <LCD_Send_Command>:

void LCD_Send_Command(uint8_t cmd)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
	/*RS=0 for LCD Command */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	480c      	ldr	r0, [pc, #48]	; (8000d20 <LCD_Send_Command+0x40>)
 8000cf0:	f000 faec 	bl	80012cc <GPIO_WriteToOutputPin>

	/*R/nW=0 for LCD Write */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	4809      	ldr	r0, [pc, #36]	; (8000d20 <LCD_Send_Command+0x40>)
 8000cfa:	f000 fae7 	bl	80012cc <GPIO_WriteToOutputPin>

	LCD_Write_4bits(cmd >> 4);		//Send Higher Nibble
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	091b      	lsrs	r3, r3, #4
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ffb3 	bl	8000c70 <LCD_Write_4bits>
	LCD_Write_4bits(cmd & 0x0F);	//Send Lower Nibble
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	f003 030f 	and.w	r3, r3, #15
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff ffac 	bl	8000c70 <LCD_Write_4bits>

}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40020c00 	.word	0x40020c00

08000d24 <LCD_Send_Data>:

void LCD_Send_Data(uint8_t data)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
	/*RS=1 for LCD User Data */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	2100      	movs	r1, #0
 8000d32:	480c      	ldr	r0, [pc, #48]	; (8000d64 <LCD_Send_Data+0x40>)
 8000d34:	f000 faca 	bl	80012cc <GPIO_WriteToOutputPin>

	/*R/nW=0 for LCD Write */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	4809      	ldr	r0, [pc, #36]	; (8000d64 <LCD_Send_Data+0x40>)
 8000d3e:	f000 fac5 	bl	80012cc <GPIO_WriteToOutputPin>

	LCD_Write_4bits(data >> 4);		//Send Higher Nibble
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	091b      	lsrs	r3, r3, #4
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff91 	bl	8000c70 <LCD_Write_4bits>
	LCD_Write_4bits(data & 0x0F);	//Send Lower Nibble
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	f003 030f 	and.w	r3, r3, #15
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff ff8a 	bl	8000c70 <LCD_Write_4bits>

}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40020c00 	.word	0x40020c00

08000d68 <LCD_Send_String>:

void LCD_Send_String(char *str)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 8000d70:	e006      	b.n	8000d80 <LCD_Send_String+0x18>
	{
		LCD_Send_Data((uint8_t)*str++);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	1c5a      	adds	r2, r3, #1
 8000d76:	607a      	str	r2, [r7, #4]
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff ffd2 	bl	8000d24 <LCD_Send_Data>
	while(*str != '\0')
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d1f4      	bne.n	8000d72 <LCD_Send_String+0xa>
	}
}
 8000d88:	bf00      	nop
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
	...

08000d94 <LCD_Enable>:

static void LCD_Enable(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_SET);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	2102      	movs	r1, #2
 8000d9c:	4807      	ldr	r0, [pc, #28]	; (8000dbc <LCD_Enable+0x28>)
 8000d9e:	f000 fa95 	bl	80012cc <GPIO_WriteToOutputPin>
	delay_us(10);
 8000da2:	200a      	movs	r0, #10
 8000da4:	f000 f85b 	bl	8000e5e <delay_us>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2102      	movs	r1, #2
 8000dac:	4803      	ldr	r0, [pc, #12]	; (8000dbc <LCD_Enable+0x28>)
 8000dae:	f000 fa8d 	bl	80012cc <GPIO_WriteToOutputPin>
	delay_us(100);
 8000db2:	2064      	movs	r0, #100	; 0x64
 8000db4:	f000 f853 	bl	8000e5e <delay_us>
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40020c00 	.word	0x40020c00

08000dc0 <LCD_Display_Clear>:

void LCD_Display_Clear(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
	//Display Clear Command
	LCD_Send_Command(LCD_CMD_DIS_CLEAR);
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f7ff ff8b 	bl	8000ce0 <LCD_Send_Command>
	delay_ms(2);
 8000dca:	2002      	movs	r0, #2
 8000dcc:	f000 f82f 	bl	8000e2e <delay_ms>
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <LCD_Display_Resturn_Home>:

void LCD_Display_Resturn_Home(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	//Display Clear Command
	LCD_Send_Command(LCD_CMD_DIS_RETURN_HOME);
 8000dd8:	2002      	movs	r0, #2
 8000dda:	f7ff ff81 	bl	8000ce0 <LCD_Send_Command>
	delay_ms(2);
 8000dde:	2002      	movs	r0, #2
 8000de0:	f000 f825 	bl	8000e2e <delay_ms>
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <LCD_Set_Cursor>:

void LCD_Set_Cursor(uint8_t row, uint8_t col)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	460a      	mov	r2, r1
 8000df2:	71fb      	strb	r3, [r7, #7]
 8000df4:	4613      	mov	r3, r2
 8000df6:	71bb      	strb	r3, [r7, #6]
	col--;
 8000df8:	79bb      	ldrb	r3, [r7, #6]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	71bb      	strb	r3, [r7, #6]
	switch(row)
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d002      	beq.n	8000e0a <LCD_Set_Cursor+0x22>
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d005      	beq.n	8000e14 <LCD_Set_Cursor+0x2c>
		case 2:
			//Set the Cursor to the 2nd row address and add index
			col |= 0xC0;
			break;
		default:
			break;
 8000e08:	e009      	b.n	8000e1e <LCD_Set_Cursor+0x36>
			col |= 0x80;	//First Row Address : 0X80
 8000e0a:	79bb      	ldrb	r3, [r7, #6]
 8000e0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e10:	71bb      	strb	r3, [r7, #6]
			break;
 8000e12:	e004      	b.n	8000e1e <LCD_Set_Cursor+0x36>
			col |= 0xC0;
 8000e14:	79bb      	ldrb	r3, [r7, #6]
 8000e16:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000e1a:	71bb      	strb	r3, [r7, #6]
			break;
 8000e1c:	bf00      	nop
	}
	LCD_Send_Command(col);
 8000e1e:	79bb      	ldrb	r3, [r7, #6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff ff5d 	bl	8000ce0 <LCD_Send_Command>
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <delay_ms>:

static void delay_ms(uint32_t cnt)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	b085      	sub	sp, #20
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0; i < (cnt * 1000); i++);
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	e002      	b.n	8000e42 <delay_ms+0x14>
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e48:	fb02 f303 	mul.w	r3, r2, r3
 8000e4c:	68fa      	ldr	r2, [r7, #12]
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d3f4      	bcc.n	8000e3c <delay_ms+0xe>
}
 8000e52:	bf00      	nop
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr

08000e5e <delay_us>:

static void delay_us(uint32_t cnt)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	b085      	sub	sp, #20
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0; i < (cnt * 1); i++);
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	e002      	b.n	8000e72 <delay_us+0x14>
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d3f8      	bcc.n	8000e6c <delay_us+0xe>
}
 8000e7a:	bf00      	nop
 8000e7c:	bf00      	nop
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr
	...

08000e88 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	460b      	mov	r3, r1
 8000e92:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000e94:	78fb      	ldrb	r3, [r7, #3]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d157      	bne.n	8000f4a <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a59      	ldr	r2, [pc, #356]	; (8001004 <GPIO_PeriClockControl+0x17c>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d106      	bne.n	8000eb0 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000ea2:	4b59      	ldr	r3, [pc, #356]	; (8001008 <GPIO_PeriClockControl+0x180>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a58      	ldr	r2, [pc, #352]	; (8001008 <GPIO_PeriClockControl+0x180>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOH)
		{
			GPIOH_PCLK_DI();
		}
	}
}
 8000eae:	e0a3      	b.n	8000ff8 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a56      	ldr	r2, [pc, #344]	; (800100c <GPIO_PeriClockControl+0x184>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d106      	bne.n	8000ec6 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000eb8:	4b53      	ldr	r3, [pc, #332]	; (8001008 <GPIO_PeriClockControl+0x180>)
 8000eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebc:	4a52      	ldr	r2, [pc, #328]	; (8001008 <GPIO_PeriClockControl+0x180>)
 8000ebe:	f043 0302 	orr.w	r3, r3, #2
 8000ec2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ec4:	e098      	b.n	8000ff8 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a51      	ldr	r2, [pc, #324]	; (8001010 <GPIO_PeriClockControl+0x188>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d106      	bne.n	8000edc <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000ece:	4b4e      	ldr	r3, [pc, #312]	; (8001008 <GPIO_PeriClockControl+0x180>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a4d      	ldr	r2, [pc, #308]	; (8001008 <GPIO_PeriClockControl+0x180>)
 8000ed4:	f043 0304 	orr.w	r3, r3, #4
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000eda:	e08d      	b.n	8000ff8 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a4d      	ldr	r2, [pc, #308]	; (8001014 <GPIO_PeriClockControl+0x18c>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d106      	bne.n	8000ef2 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000ee4:	4b48      	ldr	r3, [pc, #288]	; (8001008 <GPIO_PeriClockControl+0x180>)
 8000ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee8:	4a47      	ldr	r2, [pc, #284]	; (8001008 <GPIO_PeriClockControl+0x180>)
 8000eea:	f043 0308 	orr.w	r3, r3, #8
 8000eee:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ef0:	e082      	b.n	8000ff8 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a48      	ldr	r2, [pc, #288]	; (8001018 <GPIO_PeriClockControl+0x190>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d106      	bne.n	8000f08 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000efa:	4b43      	ldr	r3, [pc, #268]	; (8001008 <GPIO_PeriClockControl+0x180>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a42      	ldr	r2, [pc, #264]	; (8001008 <GPIO_PeriClockControl+0x180>)
 8000f00:	f043 0310 	orr.w	r3, r3, #16
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f06:	e077      	b.n	8000ff8 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a44      	ldr	r2, [pc, #272]	; (800101c <GPIO_PeriClockControl+0x194>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d106      	bne.n	8000f1e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000f10:	4b3d      	ldr	r3, [pc, #244]	; (8001008 <GPIO_PeriClockControl+0x180>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f14:	4a3c      	ldr	r2, [pc, #240]	; (8001008 <GPIO_PeriClockControl+0x180>)
 8000f16:	f043 0320 	orr.w	r3, r3, #32
 8000f1a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f1c:	e06c      	b.n	8000ff8 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a3f      	ldr	r2, [pc, #252]	; (8001020 <GPIO_PeriClockControl+0x198>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d106      	bne.n	8000f34 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000f26:	4b38      	ldr	r3, [pc, #224]	; (8001008 <GPIO_PeriClockControl+0x180>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a37      	ldr	r2, [pc, #220]	; (8001008 <GPIO_PeriClockControl+0x180>)
 8000f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f32:	e061      	b.n	8000ff8 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a3b      	ldr	r2, [pc, #236]	; (8001024 <GPIO_PeriClockControl+0x19c>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d15d      	bne.n	8000ff8 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000f3c:	4b32      	ldr	r3, [pc, #200]	; (8001008 <GPIO_PeriClockControl+0x180>)
 8000f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f40:	4a31      	ldr	r2, [pc, #196]	; (8001008 <GPIO_PeriClockControl+0x180>)
 8000f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f46:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f48:	e056      	b.n	8000ff8 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a2d      	ldr	r2, [pc, #180]	; (8001004 <GPIO_PeriClockControl+0x17c>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d106      	bne.n	8000f60 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 8000f52:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <GPIO_PeriClockControl+0x180>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a2c      	ldr	r2, [pc, #176]	; (8001008 <GPIO_PeriClockControl+0x180>)
 8000f58:	f023 0301 	bic.w	r3, r3, #1
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f5e:	e04b      	b.n	8000ff8 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a2a      	ldr	r2, [pc, #168]	; (800100c <GPIO_PeriClockControl+0x184>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d106      	bne.n	8000f76 <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 8000f68:	4b27      	ldr	r3, [pc, #156]	; (8001008 <GPIO_PeriClockControl+0x180>)
 8000f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6c:	4a26      	ldr	r2, [pc, #152]	; (8001008 <GPIO_PeriClockControl+0x180>)
 8000f6e:	f023 0302 	bic.w	r3, r3, #2
 8000f72:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f74:	e040      	b.n	8000ff8 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a25      	ldr	r2, [pc, #148]	; (8001010 <GPIO_PeriClockControl+0x188>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d106      	bne.n	8000f8c <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 8000f7e:	4b22      	ldr	r3, [pc, #136]	; (8001008 <GPIO_PeriClockControl+0x180>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a21      	ldr	r2, [pc, #132]	; (8001008 <GPIO_PeriClockControl+0x180>)
 8000f84:	f023 0304 	bic.w	r3, r3, #4
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f8a:	e035      	b.n	8000ff8 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a21      	ldr	r2, [pc, #132]	; (8001014 <GPIO_PeriClockControl+0x18c>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d106      	bne.n	8000fa2 <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 8000f94:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <GPIO_PeriClockControl+0x180>)
 8000f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f98:	4a1b      	ldr	r2, [pc, #108]	; (8001008 <GPIO_PeriClockControl+0x180>)
 8000f9a:	f023 0308 	bic.w	r3, r3, #8
 8000f9e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fa0:	e02a      	b.n	8000ff8 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a1c      	ldr	r2, [pc, #112]	; (8001018 <GPIO_PeriClockControl+0x190>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d106      	bne.n	8000fb8 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 8000faa:	4b17      	ldr	r3, [pc, #92]	; (8001008 <GPIO_PeriClockControl+0x180>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a16      	ldr	r2, [pc, #88]	; (8001008 <GPIO_PeriClockControl+0x180>)
 8000fb0:	f023 0310 	bic.w	r3, r3, #16
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fb6:	e01f      	b.n	8000ff8 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a18      	ldr	r2, [pc, #96]	; (800101c <GPIO_PeriClockControl+0x194>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d106      	bne.n	8000fce <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <GPIO_PeriClockControl+0x180>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc4:	4a10      	ldr	r2, [pc, #64]	; (8001008 <GPIO_PeriClockControl+0x180>)
 8000fc6:	f023 0320 	bic.w	r3, r3, #32
 8000fca:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fcc:	e014      	b.n	8000ff8 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a13      	ldr	r2, [pc, #76]	; (8001020 <GPIO_PeriClockControl+0x198>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d106      	bne.n	8000fe4 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <GPIO_PeriClockControl+0x180>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a0b      	ldr	r2, [pc, #44]	; (8001008 <GPIO_PeriClockControl+0x180>)
 8000fdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fe2:	e009      	b.n	8000ff8 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a0f      	ldr	r2, [pc, #60]	; (8001024 <GPIO_PeriClockControl+0x19c>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d105      	bne.n	8000ff8 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <GPIO_PeriClockControl+0x180>)
 8000fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff0:	4a05      	ldr	r2, [pc, #20]	; (8001008 <GPIO_PeriClockControl+0x180>)
 8000ff2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ff6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40020000 	.word	0x40020000
 8001008:	40023800 	.word	0x40023800
 800100c:	40020400 	.word	0x40020400
 8001010:	40020800 	.word	0x40020800
 8001014:	40020c00 	.word	0x40020c00
 8001018:	40021000 	.word	0x40021000
 800101c:	40021400 	.word	0x40021400
 8001020:	40021800 	.word	0x40021800
 8001024:	40021c00 	.word	0x40021c00

08001028 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]

	//Enable the GPIO Peripheral Clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2101      	movs	r1, #1
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff ff24 	bl	8000e88 <GPIO_PeriClockControl>

	//1. Configure the Mode of GPIO Pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	795b      	ldrb	r3, [r3, #5]
 8001044:	2b03      	cmp	r3, #3
 8001046:	d81f      	bhi.n	8001088 <GPIO_Init+0x60>
	{
		//Non Interrupt Mode
		//Shift Mode value by Pin Number and Multiply by 2 because it requires 2 bits
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	795b      	ldrb	r3, [r3, #5]
 800104c:	461a      	mov	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	791b      	ldrb	r3, [r3, #4]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	617b      	str	r3, [r7, #20]

		//First Clear Bits
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	791b      	ldrb	r3, [r3, #4]
 8001064:	4619      	mov	r1, r3
 8001066:	2303      	movs	r3, #3
 8001068:	408b      	lsls	r3, r1
 800106a:	43db      	mvns	r3, r3
 800106c:	4619      	mov	r1, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	400a      	ands	r2, r1
 8001074:	601a      	str	r2, [r3, #0]

		//Store temp value into actual MODER Register
		pGPIOHandle->pGPIOx->MODER |= temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	6819      	ldr	r1, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	697a      	ldr	r2, [r7, #20]
 8001082:	430a      	orrs	r2, r1
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	e07c      	b.n	8001182 <GPIO_Init+0x15a>
	}
	else
	{
		//Interrupt Mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	795b      	ldrb	r3, [r3, #5]
 800108c:	2b04      	cmp	r3, #4
 800108e:	d117      	bne.n	80010c0 <GPIO_Init+0x98>
		{
			//1. Configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001090:	4b8b      	ldr	r3, [pc, #556]	; (80012c0 <GPIO_Init+0x298>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	7912      	ldrb	r2, [r2, #4]
 8001098:	4611      	mov	r1, r2
 800109a:	2201      	movs	r2, #1
 800109c:	408a      	lsls	r2, r1
 800109e:	4611      	mov	r1, r2
 80010a0:	4a87      	ldr	r2, [pc, #540]	; (80012c0 <GPIO_Init+0x298>)
 80010a2:	430b      	orrs	r3, r1
 80010a4:	60d3      	str	r3, [r2, #12]

			//Clear the Corresponding bit in RTSR
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010a6:	4b86      	ldr	r3, [pc, #536]	; (80012c0 <GPIO_Init+0x298>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	7912      	ldrb	r2, [r2, #4]
 80010ae:	4611      	mov	r1, r2
 80010b0:	2201      	movs	r2, #1
 80010b2:	408a      	lsls	r2, r1
 80010b4:	43d2      	mvns	r2, r2
 80010b6:	4611      	mov	r1, r2
 80010b8:	4a81      	ldr	r2, [pc, #516]	; (80012c0 <GPIO_Init+0x298>)
 80010ba:	400b      	ands	r3, r1
 80010bc:	6093      	str	r3, [r2, #8]
 80010be:	e035      	b.n	800112c <GPIO_Init+0x104>

		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	795b      	ldrb	r3, [r3, #5]
 80010c4:	2b05      	cmp	r3, #5
 80010c6:	d117      	bne.n	80010f8 <GPIO_Init+0xd0>
		{
			//1. Configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010c8:	4b7d      	ldr	r3, [pc, #500]	; (80012c0 <GPIO_Init+0x298>)
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	7912      	ldrb	r2, [r2, #4]
 80010d0:	4611      	mov	r1, r2
 80010d2:	2201      	movs	r2, #1
 80010d4:	408a      	lsls	r2, r1
 80010d6:	4611      	mov	r1, r2
 80010d8:	4a79      	ldr	r2, [pc, #484]	; (80012c0 <GPIO_Init+0x298>)
 80010da:	430b      	orrs	r3, r1
 80010dc:	6093      	str	r3, [r2, #8]

			//Clear the Corresponding bit in FTSR
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010de:	4b78      	ldr	r3, [pc, #480]	; (80012c0 <GPIO_Init+0x298>)
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	7912      	ldrb	r2, [r2, #4]
 80010e6:	4611      	mov	r1, r2
 80010e8:	2201      	movs	r2, #1
 80010ea:	408a      	lsls	r2, r1
 80010ec:	43d2      	mvns	r2, r2
 80010ee:	4611      	mov	r1, r2
 80010f0:	4a73      	ldr	r2, [pc, #460]	; (80012c0 <GPIO_Init+0x298>)
 80010f2:	400b      	ands	r3, r1
 80010f4:	60d3      	str	r3, [r2, #12]
 80010f6:	e019      	b.n	800112c <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	795b      	ldrb	r3, [r3, #5]
 80010fc:	2b06      	cmp	r3, #6
 80010fe:	d115      	bne.n	800112c <GPIO_Init+0x104>
		{
			//1. Configure Both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001100:	4b6f      	ldr	r3, [pc, #444]	; (80012c0 <GPIO_Init+0x298>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	7912      	ldrb	r2, [r2, #4]
 8001108:	4611      	mov	r1, r2
 800110a:	2201      	movs	r2, #1
 800110c:	408a      	lsls	r2, r1
 800110e:	4611      	mov	r1, r2
 8001110:	4a6b      	ldr	r2, [pc, #428]	; (80012c0 <GPIO_Init+0x298>)
 8001112:	430b      	orrs	r3, r1
 8001114:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001116:	4b6a      	ldr	r3, [pc, #424]	; (80012c0 <GPIO_Init+0x298>)
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	7912      	ldrb	r2, [r2, #4]
 800111e:	4611      	mov	r1, r2
 8001120:	2201      	movs	r2, #1
 8001122:	408a      	lsls	r2, r1
 8001124:	4611      	mov	r1, r2
 8001126:	4a66      	ldr	r2, [pc, #408]	; (80012c0 <GPIO_Init+0x298>)
 8001128:	430b      	orrs	r3, r1
 800112a:	60d3      	str	r3, [r2, #12]
		}

		//2. Configure the GPIO Port Selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	791b      	ldrb	r3, [r3, #4]
 8001130:	089b      	lsrs	r3, r3, #2
 8001132:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	791b      	ldrb	r3, [r3, #4]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	74bb      	strb	r3, [r7, #18]

		//Create Macro or C function to return portcode
		//uint8_t portcode = GPIO_BASE_ADDR_TO_CODE(pGPIOHandle->pGPIOx);
		uint8_t portcode = GPIO_PortCode(pGPIOHandle->pGPIOx);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4618      	mov	r0, r3
 8001144:	f000 f8e6 	bl	8001314 <GPIO_PortCode>
 8001148:	4603      	mov	r3, r0
 800114a:	747b      	strb	r3, [r7, #17]

		SYSCFG_PCLK_EN();
 800114c:	4b5d      	ldr	r3, [pc, #372]	; (80012c4 <GPIO_Init+0x29c>)
 800114e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001150:	4a5c      	ldr	r2, [pc, #368]	; (80012c4 <GPIO_Init+0x29c>)
 8001152:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001156:	6453      	str	r3, [r2, #68]	; 0x44

		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8001158:	7c7a      	ldrb	r2, [r7, #17]
 800115a:	7cbb      	ldrb	r3, [r7, #18]
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	fa02 f103 	lsl.w	r1, r2, r3
 8001162:	4a59      	ldr	r2, [pc, #356]	; (80012c8 <GPIO_Init+0x2a0>)
 8001164:	7cfb      	ldrb	r3, [r7, #19]
 8001166:	3302      	adds	r3, #2
 8001168:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Enable the EXTI Interrupt delivery using IMR
		EXTI->IMR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800116c:	4b54      	ldr	r3, [pc, #336]	; (80012c0 <GPIO_Init+0x298>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	7912      	ldrb	r2, [r2, #4]
 8001174:	4611      	mov	r1, r2
 8001176:	2201      	movs	r2, #1
 8001178:	408a      	lsls	r2, r1
 800117a:	4611      	mov	r1, r2
 800117c:	4a50      	ldr	r2, [pc, #320]	; (80012c0 <GPIO_Init+0x298>)
 800117e:	430b      	orrs	r3, r1
 8001180:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]

	//2. Configure the Speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOType << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	7a1b      	ldrb	r3, [r3, #8]
 800118a:	461a      	mov	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	791b      	ldrb	r3, [r3, #4]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	617b      	str	r3, [r7, #20]

	//First Clear Bits
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	689a      	ldr	r2, [r3, #8]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	791b      	ldrb	r3, [r3, #4]
 80011a2:	4619      	mov	r1, r3
 80011a4:	2303      	movs	r3, #3
 80011a6:	408b      	lsls	r3, r1
 80011a8:	43db      	mvns	r3, r3
 80011aa:	4619      	mov	r1, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	400a      	ands	r2, r1
 80011b2:	609a      	str	r2, [r3, #8]

	//Store temp value into actual OSPEEDER Register
	pGPIOHandle->pGPIOx->OSPEEDER |= temp;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6899      	ldr	r1, [r3, #8]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	430a      	orrs	r2, r1
 80011c2:	609a      	str	r2, [r3, #8]

	temp = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]

	//3. Configure PuPd Settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	79db      	ldrb	r3, [r3, #7]
 80011cc:	461a      	mov	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	791b      	ldrb	r3, [r3, #4]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	617b      	str	r3, [r7, #20]

	//First Clear Bits
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	68da      	ldr	r2, [r3, #12]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	791b      	ldrb	r3, [r3, #4]
 80011e4:	4619      	mov	r1, r3
 80011e6:	2303      	movs	r3, #3
 80011e8:	408b      	lsls	r3, r1
 80011ea:	43db      	mvns	r3, r3
 80011ec:	4619      	mov	r1, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	400a      	ands	r2, r1
 80011f4:	60da      	str	r2, [r3, #12]

	//Store temp value into actual PUPDR Register
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	68d9      	ldr	r1, [r3, #12]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	430a      	orrs	r2, r1
 8001204:	60da      	str	r2, [r3, #12]

	temp = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]

	//4. Configure Output Type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	7a1b      	ldrb	r3, [r3, #8]
 800120e:	461a      	mov	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	791b      	ldrb	r3, [r3, #4]
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	617b      	str	r3, [r7, #20]

	//First Clear Bits
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	791b      	ldrb	r3, [r3, #4]
 8001224:	4619      	mov	r1, r3
 8001226:	2301      	movs	r3, #1
 8001228:	408b      	lsls	r3, r1
 800122a:	43db      	mvns	r3, r3
 800122c:	4619      	mov	r1, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	400a      	ands	r2, r1
 8001234:	605a      	str	r2, [r3, #4]

	//Store temp value into actual PUPDR Register
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6859      	ldr	r1, [r3, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	697a      	ldr	r2, [r7, #20]
 8001242:	430a      	orrs	r2, r1
 8001244:	605a      	str	r2, [r3, #4]

	temp = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]

	//5. Configure Alt Functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALT_FN)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	795b      	ldrb	r3, [r3, #5]
 800124e:	2b02      	cmp	r3, #2
 8001250:	d131      	bne.n	80012b6 <GPIO_Init+0x28e>
	{
		//Configure Alt Fun Register
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	791b      	ldrb	r3, [r3, #4]
 8001256:	08db      	lsrs	r3, r3, #3
 8001258:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	791b      	ldrb	r3, [r3, #4]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	73fb      	strb	r3, [r7, #15]

		//First Clear Bits
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF <<  (4 * temp2) );
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	7c3a      	ldrb	r2, [r7, #16]
 800126a:	3208      	adds	r2, #8
 800126c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	220f      	movs	r2, #15
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	4618      	mov	r0, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	7c3a      	ldrb	r2, [r7, #16]
 8001284:	4001      	ands	r1, r0
 8001286:	3208      	adds	r2, #8
 8001288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		//Store value into actual AFRL or AFRH Register
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode <<  (4 * temp2) );
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	7c3a      	ldrb	r2, [r7, #16]
 8001292:	3208      	adds	r2, #8
 8001294:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	7a5b      	ldrb	r3, [r3, #9]
 800129c:	461a      	mov	r2, r3
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	7c3a      	ldrb	r2, [r7, #16]
 80012ae:	4301      	orrs	r1, r0
 80012b0:	3208      	adds	r2, #8
 80012b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80012b6:	bf00      	nop
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40013c00 	.word	0x40013c00
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40013800 	.word	0x40013800

080012cc <GPIO_WriteToOutputPin>:
 *
 * @Note              -

 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	70fb      	strb	r3, [r7, #3]
 80012d8:	4613      	mov	r3, r2
 80012da:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET)
 80012dc:	78bb      	ldrb	r3, [r7, #2]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d109      	bne.n	80012f6 <GPIO_WriteToOutputPin+0x2a>
	{
		//Write 1 to ODR at Bitfield corresponding PinNumber
		pGPIOx->ODR |= (1 << PinNumber);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	78fa      	ldrb	r2, [r7, #3]
 80012e8:	2101      	movs	r1, #1
 80012ea:	fa01 f202 	lsl.w	r2, r1, r2
 80012ee:	431a      	orrs	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	615a      	str	r2, [r3, #20]
	else
	{
		//Write 0 to ODR at Bitfield corresponding PinNumber
		pGPIOx->ODR &= ~(1 << PinNumber);
	}
}
 80012f4:	e009      	b.n	800130a <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	78fa      	ldrb	r2, [r7, #3]
 80012fc:	2101      	movs	r1, #1
 80012fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001302:	43d2      	mvns	r2, r2
 8001304:	401a      	ands	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	615a      	str	r2, [r3, #20]
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr

08001314 <GPIO_PortCode>:
}

//Helper Function

int GPIO_PortCode(GPIO_RegDef_t *pGPIOx)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	if( pGPIOx== GPIOA)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a1a      	ldr	r2, [pc, #104]	; (8001388 <GPIO_PortCode+0x74>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d101      	bne.n	8001328 <GPIO_PortCode+0x14>
		return 0;
 8001324:	2300      	movs	r3, #0
 8001326:	e02a      	b.n	800137e <GPIO_PortCode+0x6a>
	else if(pGPIOx == GPIOB)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a18      	ldr	r2, [pc, #96]	; (800138c <GPIO_PortCode+0x78>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d101      	bne.n	8001334 <GPIO_PortCode+0x20>
		return 1;
 8001330:	2301      	movs	r3, #1
 8001332:	e024      	b.n	800137e <GPIO_PortCode+0x6a>
	else if(pGPIOx == GPIOC)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a16      	ldr	r2, [pc, #88]	; (8001390 <GPIO_PortCode+0x7c>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d101      	bne.n	8001340 <GPIO_PortCode+0x2c>
		return 2;
 800133c:	2302      	movs	r3, #2
 800133e:	e01e      	b.n	800137e <GPIO_PortCode+0x6a>
	else if(pGPIOx == GPIOD)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a14      	ldr	r2, [pc, #80]	; (8001394 <GPIO_PortCode+0x80>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d101      	bne.n	800134c <GPIO_PortCode+0x38>
		return 3;
 8001348:	2303      	movs	r3, #3
 800134a:	e018      	b.n	800137e <GPIO_PortCode+0x6a>
	else if(pGPIOx == GPIOE)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a12      	ldr	r2, [pc, #72]	; (8001398 <GPIO_PortCode+0x84>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d101      	bne.n	8001358 <GPIO_PortCode+0x44>
		return 4;
 8001354:	2304      	movs	r3, #4
 8001356:	e012      	b.n	800137e <GPIO_PortCode+0x6a>
	else if(pGPIOx == GPIOF)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a10      	ldr	r2, [pc, #64]	; (800139c <GPIO_PortCode+0x88>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d101      	bne.n	8001364 <GPIO_PortCode+0x50>
		return 5;
 8001360:	2305      	movs	r3, #5
 8001362:	e00c      	b.n	800137e <GPIO_PortCode+0x6a>
	else if(pGPIOx == GPIOG)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a0e      	ldr	r2, [pc, #56]	; (80013a0 <GPIO_PortCode+0x8c>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d101      	bne.n	8001370 <GPIO_PortCode+0x5c>
		return 6;
 800136c:	2306      	movs	r3, #6
 800136e:	e006      	b.n	800137e <GPIO_PortCode+0x6a>
	else if(pGPIOx == GPIOH)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4a0c      	ldr	r2, [pc, #48]	; (80013a4 <GPIO_PortCode+0x90>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d101      	bne.n	800137c <GPIO_PortCode+0x68>
		return 7;
 8001378:	2307      	movs	r3, #7
 800137a:	e000      	b.n	800137e <GPIO_PortCode+0x6a>
	else
		return 0;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	40020000 	.word	0x40020000
 800138c:	40020400 	.word	0x40020400
 8001390:	40020800 	.word	0x40020800
 8001394:	40020c00 	.word	0x40020c00
 8001398:	40021000 	.word	0x40021000
 800139c:	40021400 	.word	0x40021400
 80013a0:	40021800 	.word	0x40021800
 80013a4:	40021c00 	.word	0x40021c00

080013a8 <I2C_GenerateStartCondition>:
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle);
static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle);
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle);

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	601a      	str	r2, [r3, #0]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr

080013c6 <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b083      	sub	sp, #12
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
 80013ce:	460b      	mov	r3, r1
 80013d0:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 80013d2:	78fb      	ldrb	r3, [r7, #3]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1 << 0);			//Clear 0th bit W=0
 80013d8:	78fb      	ldrb	r3, [r7, #3]
 80013da:	f023 0301 	bic.w	r3, r3, #1
 80013de:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;			//SlaveAdd + R/W bit(0)
 80013e0:	78fa      	ldrb	r2, [r7, #3]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	611a      	str	r2, [r3, #16]
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <I2C_ExecuteAddressPhaseRead>:

static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 80013fc:	78fb      	ldrb	r3, [r7, #3]
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= (1 << 0);			//Set 0th bit R/W = 1
 8001402:	78fb      	ldrb	r3, [r7, #3]
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;			//SlaveAdd + R/W bit(1)
 800140a:	78fa      	ldrb	r2, [r7, #3]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	611a      	str	r2, [r3, #16]
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr

0800141a <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b084      	sub	sp, #16
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;

	//Check for device mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	2b00      	cmp	r3, #0
 800142e:	d01e      	beq.n	800146e <I2C_ClearADDRFlag+0x54>
	{
		//Master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	7f1b      	ldrb	r3, [r3, #28]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d112      	bne.n	800145e <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize == 1)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a1b      	ldr	r3, [r3, #32]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d116      	bne.n	800146e <I2C_ClearADDRFlag+0x54>
			{
				//First Disable the ACK
				I2C_ACKControl(pI2CHandle->pI2Cx, DISABLE);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2100      	movs	r1, #0
 8001446:	4618      	mov	r0, r3
 8001448:	f000 f927 	bl	800169a <I2C_ACKControl>

				//Clear ADDR Flag : Read SR1 and SR2
				dummy_read = pI2CHandle->pI2Cx->SR1;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	60fb      	str	r3, [r7, #12]
	}
	else
	{
		//Slave mode
	}
}
 800145c:	e007      	b.n	800146e <I2C_ClearADDRFlag+0x54>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	60fb      	str	r3, [r7, #12]
}
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <I2C_GenerateStopCondition>:

void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	601a      	str	r2, [r3, #0]
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <I2C_PeriClockControl>:
 *
 * @Note              -  none

 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80014a0:	78fb      	ldrb	r3, [r7, #3]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d120      	bne.n	80014e8 <I2C_PeriClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a22      	ldr	r2, [pc, #136]	; (8001534 <I2C_PeriClockControl+0xa0>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d106      	bne.n	80014bc <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 80014ae:	4b22      	ldr	r3, [pc, #136]	; (8001538 <I2C_PeriClockControl+0xa4>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	4a21      	ldr	r2, [pc, #132]	; (8001538 <I2C_PeriClockControl+0xa4>)
 80014b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014b8:	6413      	str	r3, [r2, #64]	; 0x40
		else if(pI2Cx == I2C3)
		{
			I2C3_PCLK_DI();
		}
	}
}
 80014ba:	e035      	b.n	8001528 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a1f      	ldr	r2, [pc, #124]	; (800153c <I2C_PeriClockControl+0xa8>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d106      	bne.n	80014d2 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 80014c4:	4b1c      	ldr	r3, [pc, #112]	; (8001538 <I2C_PeriClockControl+0xa4>)
 80014c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c8:	4a1b      	ldr	r2, [pc, #108]	; (8001538 <I2C_PeriClockControl+0xa4>)
 80014ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014ce:	6413      	str	r3, [r2, #64]	; 0x40
}
 80014d0:	e02a      	b.n	8001528 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C3)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a1a      	ldr	r2, [pc, #104]	; (8001540 <I2C_PeriClockControl+0xac>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d126      	bne.n	8001528 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 80014da:	4b17      	ldr	r3, [pc, #92]	; (8001538 <I2C_PeriClockControl+0xa4>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	4a16      	ldr	r2, [pc, #88]	; (8001538 <I2C_PeriClockControl+0xa4>)
 80014e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014e4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80014e6:	e01f      	b.n	8001528 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a12      	ldr	r2, [pc, #72]	; (8001534 <I2C_PeriClockControl+0xa0>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d106      	bne.n	80014fe <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <I2C_PeriClockControl+0xa4>)
 80014f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f4:	4a10      	ldr	r2, [pc, #64]	; (8001538 <I2C_PeriClockControl+0xa4>)
 80014f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80014fa:	6413      	str	r3, [r2, #64]	; 0x40
}
 80014fc:	e014      	b.n	8001528 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a0e      	ldr	r2, [pc, #56]	; (800153c <I2C_PeriClockControl+0xa8>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d106      	bne.n	8001514 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 8001506:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <I2C_PeriClockControl+0xa4>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <I2C_PeriClockControl+0xa4>)
 800150c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001512:	e009      	b.n	8001528 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C3)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <I2C_PeriClockControl+0xac>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d105      	bne.n	8001528 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <I2C_PeriClockControl+0xa4>)
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	4a05      	ldr	r2, [pc, #20]	; (8001538 <I2C_PeriClockControl+0xa4>)
 8001522:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001526:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	40005400 	.word	0x40005400
 8001538:	40023800 	.word	0x40023800
 800153c:	40005800 	.word	0x40005800
 8001540:	40005c00 	.word	0x40005c00

08001544 <I2C_Init>:
 *
 * @Note              -

 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]

	//Enable the Clock for I2C Peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2101      	movs	r1, #1
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff ff9c 	bl	8001494 <I2C_PeriClockControl>

	//ACK Control in CR1 Register
	tempreg |= pI2CHandle->I2C_Config.I2C_ACKControl << 10;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7a5b      	ldrb	r3, [r3, #9]
 8001560:	029b      	lsls	r3, r3, #10
 8001562:	461a      	mov	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4313      	orrs	r3, r2
 8001568:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	601a      	str	r2, [r3, #0]

	//Configure the FREQ Field of CR2
	tempreg = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() / 1000000U ;	//16000000/1000000 = 16
 8001576:	f000 f9b7 	bl	80018e8 <RCC_GetPCLK1Value>
 800157a:	4603      	mov	r3, r0
 800157c:	4a37      	ldr	r2, [pc, #220]	; (800165c <I2C_Init+0x118>)
 800157e:	fba2 2303 	umull	r2, r3, r2, r3
 8001582:	0c9b      	lsrs	r3, r3, #18
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	4313      	orrs	r3, r2
 8001588:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001594:	605a      	str	r2, [r3, #4]

	//3. Program Device Owm Address(Slave Address) in I2C_OAR1_ADD[7:1]
	//I2C_OAR1_ADD_MODE(bit 15) = 0 : 7 bit addressing
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	7a1b      	ldrb	r3, [r3, #8]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	461a      	mov	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	60fb      	str	r3, [r7, #12]
	//tempreg &= ~(1 << 15);			//7 bit addressing (Optional)
	tempreg |= (1 << 14);				//given in RM
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015aa:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	609a      	str	r2, [r3, #8]

	//4.CCR Calculation : Refer I2C_CCR Register
	uint16_t ccr_value = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM )
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	4a27      	ldr	r2, [pc, #156]	; (8001660 <I2C_Init+0x11c>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d813      	bhi.n	80015ee <I2C_Init+0xaa>
	{
		//Standard Mode
		tempreg &= ~(1 << 15);	//Standard Mode
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80015cc:	60fb      	str	r3, [r7, #12]
		ccr_value = RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed );
 80015ce:	f000 f98b 	bl	80018e8 <RCC_GetPCLK1Value>
 80015d2:	4602      	mov	r2, r0
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	fbb2 f3f3 	udiv	r3, r2, r3
 80015de:	817b      	strh	r3, [r7, #10]
		tempreg |= ccr_value & 0x0FFF;
 80015e0:	897b      	ldrh	r3, [r7, #10]
 80015e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	e02d      	b.n	800164a <I2C_Init+0x106>
	}
	else
	{
		//Fast Mode
		tempreg |= (1 << 15); 	//Fast Moode
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015f4:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	895b      	ldrh	r3, [r3, #10]
 80015fa:	039b      	lsls	r3, r3, #14
 80015fc:	461a      	mov	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	4313      	orrs	r3, r2
 8001602:	60fb      	str	r3, [r7, #12]

		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	895b      	ldrh	r3, [r3, #10]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d10b      	bne.n	8001624 <I2C_Init+0xe0>
		{
			ccr_value = RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed );
 800160c:	f000 f96c 	bl	80018e8 <RCC_GetPCLK1Value>
 8001610:	4601      	mov	r1, r0
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	4613      	mov	r3, r2
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	4413      	add	r3, r2
 800161c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001620:	817b      	strh	r3, [r7, #10]
 8001622:	e00c      	b.n	800163e <I2C_Init+0xfa>
		}
		else
		{
			ccr_value = RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed );
 8001624:	f000 f960 	bl	80018e8 <RCC_GetPCLK1Value>
 8001628:	4601      	mov	r1, r0
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	4613      	mov	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	009a      	lsls	r2, r3, #2
 8001636:	4413      	add	r3, r2
 8001638:	fbb1 f3f3 	udiv	r3, r1, r3
 800163c:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= ccr_value & 0x0FFF;
 800163e:	897b      	ldrh	r3, [r7, #10]
 8001640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	4313      	orrs	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->CCR = tempreg;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	61da      	str	r2, [r3, #28]

	//5. Configure TRISE Register


}
 8001652:	bf00      	nop
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	431bde83 	.word	0x431bde83
 8001660:	000186a0 	.word	0x000186a0

08001664 <I2C_PeripheralControl>:
 *
 * @Note              -

 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8001670:	78fb      	ldrb	r3, [r7, #3]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d106      	bne.n	8001684 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f043 0201 	orr.w	r2, r3, #1
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 8001682:	e005      	b.n	8001690 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f023 0201 	bic.w	r2, r3, #1
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	601a      	str	r2, [r3, #0]
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr

0800169a <I2C_ACKControl>:
 *
 * @Note              -

 */
void I2C_ACKControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	460b      	mov	r3, r1
 80016a4:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 80016a6:	78fb      	ldrb	r3, [r7, #3]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d106      	bne.n	80016ba <I2C_ACKControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 80016b8:	e005      	b.n	80016c6 <I2C_ACKControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	601a      	str	r2, [r3, #0]
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr

080016d0 <I2C_GetFlagStatus>:
 *
 * @Note              -

 */
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695a      	ldr	r2, [r3, #20]
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr

080016f6 <I2C_MasterSendData>:
 *
 * @Note              -

 */
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint8_t Len, uint8_t SlaveAddr, uint8_t Sr)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b084      	sub	sp, #16
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	60f8      	str	r0, [r7, #12]
 80016fe:	60b9      	str	r1, [r7, #8]
 8001700:	4611      	mov	r1, r2
 8001702:	461a      	mov	r2, r3
 8001704:	460b      	mov	r3, r1
 8001706:	71fb      	strb	r3, [r7, #7]
 8001708:	4613      	mov	r3, r2
 800170a:	71bb      	strb	r3, [r7, #6]
	//1. Generate Start Condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fe49 	bl	80013a8 <I2C_GenerateStartCondition>

	//2. Confirm that START Condition is completed by checking SB Flag in SR1
	//Note: Until SB is Cleared SCL will be stretched (pulled to LOW)
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 8001716:	bf00      	nop
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2101      	movs	r1, #1
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff ffd6 	bl	80016d0 <I2C_GetFlagStatus>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f6      	beq.n	8001718 <I2C_MasterSendData+0x22>

	//3. Send the Address of Slave with R/W bit w(0) total 8-bits
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, SlaveAddr);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	79ba      	ldrb	r2, [r7, #6]
 8001730:	4611      	mov	r1, r2
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fe47 	bl	80013c6 <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that Address+R/W is send is completed by checking ADDR Flag
	//Note: Clear ADDR Flag by SW Sequence
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 8001738:	bf00      	nop
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2102      	movs	r1, #2
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ffc5 	bl	80016d0 <I2C_GetFlagStatus>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0f6      	beq.n	800173a <I2C_MasterSendData+0x44>

	//5 Clear ADDR Flag according to Its Software Sequence
	//Note: Until ADDR is Cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 800174c:	68f8      	ldr	r0, [r7, #12]
 800174e:	f7ff fe64 	bl	800141a <I2C_ClearADDRFlag>

	//6. Send Data until Len becomes 0
	while(Len > 0)
 8001752:	e014      	b.n	800177e <I2C_MasterSendData+0x88>
	{
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)); //wait until TXE Flag is Set
 8001754:	bf00      	nop
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2180      	movs	r1, #128	; 0x80
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ffb7 	bl	80016d0 <I2C_GetFlagStatus>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0f6      	beq.n	8001756 <I2C_MasterSendData+0x60>
		pI2CHandle->pI2Cx->DR = *pTxBuffer;
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	781a      	ldrb	r2, [r3, #0]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	3301      	adds	r3, #1
 8001776:	60bb      	str	r3, [r7, #8]
		Len--;
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	3b01      	subs	r3, #1
 800177c:	71fb      	strb	r3, [r7, #7]
	while(Len > 0)
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1e7      	bne.n	8001754 <I2C_MasterSendData+0x5e>
	}

	//7. When Len becomes 0 wait for TXE=1 and BTF=1 before generating STOP Codition
	//Note: TXE=1, BTF=1 means that both SR and DR are empty and next transmission should begin
	//when BTF=1 SCL will be stretched (pulled to LOW)
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
 8001784:	bf00      	nop
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2180      	movs	r1, #128	; 0x80
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff9f 	bl	80016d0 <I2C_GetFlagStatus>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0f6      	beq.n	8001786 <I2C_MasterSendData+0x90>
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF));
 8001798:	bf00      	nop
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2104      	movs	r1, #4
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff95 	bl	80016d0 <I2C_GetFlagStatus>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0f6      	beq.n	800179a <I2C_MasterSendData+0xa4>

	//8. Generate STOP Condition and Matser need not to wait for completion of STOP Condition
	//Note: Generating STOP, automatically Clears the BTF
	if(Sr == I2C_DISABLE_SR)
 80017ac:	7e3b      	ldrb	r3, [r7, #24]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d104      	bne.n	80017bc <I2C_MasterSendData+0xc6>
	{
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fe5d 	bl	8001476 <I2C_GenerateStopCondition>
	}

}
 80017bc:	bf00      	nop
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <I2C_MasterReceiveData>:
 *
 * @Note              -

 */
void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr, uint8_t Sr)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	4611      	mov	r1, r2
 80017d0:	461a      	mov	r2, r3
 80017d2:	460b      	mov	r3, r1
 80017d4:	71fb      	strb	r3, [r7, #7]
 80017d6:	4613      	mov	r3, r2
 80017d8:	71bb      	strb	r3, [r7, #6]
	//1. Generate Start Condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fde2 	bl	80013a8 <I2C_GenerateStartCondition>

	//2. Confirm that START Condition is completed by checking SB Flag in SR1
	//Note: Until SB is Cleared SCL will be stretched (pulled to LOW)
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 80017e4:	bf00      	nop
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2101      	movs	r1, #1
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff6f 	bl	80016d0 <I2C_GetFlagStatus>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0f6      	beq.n	80017e6 <I2C_MasterReceiveData+0x22>

	//3. Send the Address of Slave with R/W bit R(1) total 8-bits
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, SlaveAddr);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	79ba      	ldrb	r2, [r7, #6]
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fdf5 	bl	80013f0 <I2C_ExecuteAddressPhaseRead>

	//4. Confirm that Address+R/W is send is completed by checking ADDR Flag
	//Note: Clear ADDR Flag by SW Sequence
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 8001806:	bf00      	nop
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2102      	movs	r1, #2
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff ff5e 	bl	80016d0 <I2C_GetFlagStatus>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d0f6      	beq.n	8001808 <I2C_MasterReceiveData+0x44>

	//Procedure to read only 1 byte from slave
	if(Len == 1)
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d121      	bne.n	8001864 <I2C_MasterReceiveData+0xa0>
	{
		//Disable ACking : ACK=0
		I2C_ACKControl(pI2CHandle->pI2Cx, DISABLE);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2100      	movs	r1, #0
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff ff37 	bl	800169a <I2C_ACKControl>

		//Clear ADDR Flag : ADDR=0
		I2C_ClearADDRFlag(pI2CHandle);
 800182c:	68f8      	ldr	r0, [r7, #12]
 800182e:	f7ff fdf4 	bl	800141a <I2C_ClearADDRFlag>

		//wait until RXNE becomes 1
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE)); //wait until RXNE Flag is Set
 8001832:	bf00      	nop
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2140      	movs	r1, #64	; 0x40
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff ff48 	bl	80016d0 <I2C_GetFlagStatus>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f6      	beq.n	8001834 <I2C_MasterReceiveData+0x70>

		//Generate STOP Condition if Sr=0
		if(Sr == I2C_DISABLE_SR)
 8001846:	f897 3020 	ldrb.w	r3, [r7, #32]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d104      	bne.n	8001858 <I2C_MasterReceiveData+0x94>
		{
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fe0f 	bl	8001476 <I2C_GenerateStopCondition>
		}

		//Read data into buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	b2da      	uxtb	r2, r3
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	701a      	strb	r2, [r3, #0]
	}

	//Procedure to read more than 1 byte from slave
	if(Len > 1)
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d930      	bls.n	80018cc <I2C_MasterReceiveData+0x108>
	{
		//Clear ADDR Flag
		I2C_ClearADDRFlag(pI2CHandle);
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f7ff fdd5 	bl	800141a <I2C_ClearADDRFlag>

		//Read data until Len becomes zero
		for(uint32_t i=Len; i > 0; i--)
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	e027      	b.n	80018c6 <I2C_MasterReceiveData+0x102>
		{
			//wait until RXNE becomes 1
			while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE));
 8001876:	bf00      	nop
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2140      	movs	r1, #64	; 0x40
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ff26 	bl	80016d0 <I2C_GetFlagStatus>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0f6      	beq.n	8001878 <I2C_MasterReceiveData+0xb4>

			if(i == 2)	//if last two byte are remaining
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	2b02      	cmp	r3, #2
 800188e:	d10e      	bne.n	80018ae <I2C_MasterReceiveData+0xea>
			{
				//Clear ACK bit : ACK = 0
				I2C_ACKControl(pI2CHandle->pI2Cx, DISABLE);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2100      	movs	r1, #0
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff feff 	bl	800169a <I2C_ACKControl>

				//Generate STOP Condition if Sr=0
				if(Sr == I2C_DISABLE_SR)
 800189c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d104      	bne.n	80018ae <I2C_MasterReceiveData+0xea>
				{
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fde4 	bl	8001476 <I2C_GenerateStopCondition>
				}
			}

			//Read data from DR into Buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	701a      	strb	r2, [r3, #0]

			//Increment the buffer address
			pRxBuffer++;
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	3301      	adds	r3, #1
 80018be:	60bb      	str	r3, [r7, #8]
		for(uint32_t i=Len; i > 0; i--)
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1d4      	bne.n	8001876 <I2C_MasterReceiveData+0xb2>
		}

	}

	//Re-Enable the ACKing: ACK=1
	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	7a5b      	ldrb	r3, [r3, #9]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d105      	bne.n	80018e0 <I2C_MasterReceiveData+0x11c>
	{
		I2C_ACKControl(pI2CHandle->pI2Cx, ENABLE);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2101      	movs	r1, #1
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff fedd 	bl	800169a <I2C_ACKControl>
	}

}
 80018e0:	bf00      	nop
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <RCC_GetPCLK1Value>:
 *
 * @Note              -

 */
uint32_t RCC_GetPCLK1Value(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;

	uint8_t clksrc, temp, ahbpr, apb1pr;
	//RCC_CFGR_SWS :  Clk Source
	clksrc = (RCC->CFGR >> 2) & 0x03;
 80018ee:	4b26      	ldr	r3, [pc, #152]	; (8001988 <RCC_GetPCLK1Value+0xa0>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	089b      	lsrs	r3, r3, #2
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	727b      	strb	r3, [r7, #9]
	if(clksrc == 0)
 80018fc:	7a7b      	ldrb	r3, [r7, #9]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d102      	bne.n	8001908 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;	//HSI
 8001902:	4b22      	ldr	r3, [pc, #136]	; (800198c <RCC_GetPCLK1Value+0xa4>)
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	e00b      	b.n	8001920 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc == 1)
 8001908:	7a7b      	ldrb	r3, [r7, #9]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d102      	bne.n	8001914 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;	//HSE
 800190e:	4b20      	ldr	r3, [pc, #128]	; (8001990 <RCC_GetPCLK1Value+0xa8>)
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	e005      	b.n	8001920 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc == 2)
 8001914:	7a7b      	ldrb	r3, [r7, #9]
 8001916:	2b02      	cmp	r3, #2
 8001918:	d102      	bne.n	8001920 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();		//PLL
 800191a:	f000 f83f 	bl	800199c <RCC_GetPLLOutputClock>
 800191e:	60f8      	str	r0, [r7, #12]
	}

	//RCC_CFGR_HPRE : AHB Prescaler
	temp = (RCC->CFGR >> 4) & 0x0F;
 8001920:	4b19      	ldr	r3, [pc, #100]	; (8001988 <RCC_GetPCLK1Value+0xa0>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	091b      	lsrs	r3, r3, #4
 8001926:	b2db      	uxtb	r3, r3
 8001928:	f003 030f 	and.w	r3, r3, #15
 800192c:	723b      	strb	r3, [r7, #8]
	if(temp < 8)
 800192e:	7a3b      	ldrb	r3, [r7, #8]
 8001930:	2b07      	cmp	r3, #7
 8001932:	d802      	bhi.n	800193a <RCC_GetPCLK1Value+0x52>
	{
		ahbpr = 1;
 8001934:	2301      	movs	r3, #1
 8001936:	72fb      	strb	r3, [r7, #11]
 8001938:	e005      	b.n	8001946 <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		ahbpr = AHB_PreScalar[temp - 8];
 800193a:	7a3b      	ldrb	r3, [r7, #8]
 800193c:	3b08      	subs	r3, #8
 800193e:	4a15      	ldr	r2, [pc, #84]	; (8001994 <RCC_GetPCLK1Value+0xac>)
 8001940:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001944:	72fb      	strb	r3, [r7, #11]
	}

	//RCC_CFGR_PPRE1 : APB1 Prescaler
	temp = (RCC->CFGR >> 10) & 0x07;
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <RCC_GetPCLK1Value+0xa0>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	0a9b      	lsrs	r3, r3, #10
 800194c:	b2db      	uxtb	r3, r3
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	723b      	strb	r3, [r7, #8]
	if(temp < 4)
 8001954:	7a3b      	ldrb	r3, [r7, #8]
 8001956:	2b03      	cmp	r3, #3
 8001958:	d802      	bhi.n	8001960 <RCC_GetPCLK1Value+0x78>
	{
		apb1pr = 1;
 800195a:	2301      	movs	r3, #1
 800195c:	72bb      	strb	r3, [r7, #10]
 800195e:	e005      	b.n	800196c <RCC_GetPCLK1Value+0x84>
	}
	else
	{
		apb1pr = APB1_PreScalar[temp - 4];
 8001960:	7a3b      	ldrb	r3, [r7, #8]
 8001962:	3b04      	subs	r3, #4
 8001964:	4a0c      	ldr	r2, [pc, #48]	; (8001998 <RCC_GetPCLK1Value+0xb0>)
 8001966:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800196a:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = ( (SystemClk / ahbpr) / apb1pr);
 800196c:	7afb      	ldrb	r3, [r7, #11]
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	fbb2 f2f3 	udiv	r2, r2, r3
 8001974:	7abb      	ldrb	r3, [r7, #10]
 8001976:	fbb2 f3f3 	udiv	r3, r2, r3
 800197a:	607b      	str	r3, [r7, #4]

	return pclk1;
 800197c:	687b      	ldr	r3, [r7, #4]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800
 800198c:	00f42400 	.word	0x00f42400
 8001990:	007a1200 	.word	0x007a1200
 8001994:	20000000 	.word	0x20000000
 8001998:	20000014 	.word	0x20000014

0800199c <RCC_GetPLLOutputClock>:
	return pclk2;
}


uint32_t RCC_GetPLLOutputClock()
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
	uint32_t pllclk = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	607b      	str	r3, [r7, #4]
	//TODO
	return pllclk;
 80019a6:	687b      	ldr	r3, [r7, #4]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr
	...

080019b4 <__errno>:
 80019b4:	4b01      	ldr	r3, [pc, #4]	; (80019bc <__errno+0x8>)
 80019b6:	6818      	ldr	r0, [r3, #0]
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	2000001c 	.word	0x2000001c

080019c0 <__libc_init_array>:
 80019c0:	b570      	push	{r4, r5, r6, lr}
 80019c2:	4d0d      	ldr	r5, [pc, #52]	; (80019f8 <__libc_init_array+0x38>)
 80019c4:	4c0d      	ldr	r4, [pc, #52]	; (80019fc <__libc_init_array+0x3c>)
 80019c6:	1b64      	subs	r4, r4, r5
 80019c8:	10a4      	asrs	r4, r4, #2
 80019ca:	2600      	movs	r6, #0
 80019cc:	42a6      	cmp	r6, r4
 80019ce:	d109      	bne.n	80019e4 <__libc_init_array+0x24>
 80019d0:	4d0b      	ldr	r5, [pc, #44]	; (8001a00 <__libc_init_array+0x40>)
 80019d2:	4c0c      	ldr	r4, [pc, #48]	; (8001a04 <__libc_init_array+0x44>)
 80019d4:	f000 fce4 	bl	80023a0 <_init>
 80019d8:	1b64      	subs	r4, r4, r5
 80019da:	10a4      	asrs	r4, r4, #2
 80019dc:	2600      	movs	r6, #0
 80019de:	42a6      	cmp	r6, r4
 80019e0:	d105      	bne.n	80019ee <__libc_init_array+0x2e>
 80019e2:	bd70      	pop	{r4, r5, r6, pc}
 80019e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80019e8:	4798      	blx	r3
 80019ea:	3601      	adds	r6, #1
 80019ec:	e7ee      	b.n	80019cc <__libc_init_array+0xc>
 80019ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80019f2:	4798      	blx	r3
 80019f4:	3601      	adds	r6, #1
 80019f6:	e7f2      	b.n	80019de <__libc_init_array+0x1e>
 80019f8:	08002488 	.word	0x08002488
 80019fc:	08002488 	.word	0x08002488
 8001a00:	08002488 	.word	0x08002488
 8001a04:	0800248c 	.word	0x0800248c

08001a08 <memset>:
 8001a08:	4402      	add	r2, r0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d100      	bne.n	8001a12 <memset+0xa>
 8001a10:	4770      	bx	lr
 8001a12:	f803 1b01 	strb.w	r1, [r3], #1
 8001a16:	e7f9      	b.n	8001a0c <memset+0x4>

08001a18 <_puts_r>:
 8001a18:	b570      	push	{r4, r5, r6, lr}
 8001a1a:	460e      	mov	r6, r1
 8001a1c:	4605      	mov	r5, r0
 8001a1e:	b118      	cbz	r0, 8001a28 <_puts_r+0x10>
 8001a20:	6983      	ldr	r3, [r0, #24]
 8001a22:	b90b      	cbnz	r3, 8001a28 <_puts_r+0x10>
 8001a24:	f000 fa48 	bl	8001eb8 <__sinit>
 8001a28:	69ab      	ldr	r3, [r5, #24]
 8001a2a:	68ac      	ldr	r4, [r5, #8]
 8001a2c:	b913      	cbnz	r3, 8001a34 <_puts_r+0x1c>
 8001a2e:	4628      	mov	r0, r5
 8001a30:	f000 fa42 	bl	8001eb8 <__sinit>
 8001a34:	4b2c      	ldr	r3, [pc, #176]	; (8001ae8 <_puts_r+0xd0>)
 8001a36:	429c      	cmp	r4, r3
 8001a38:	d120      	bne.n	8001a7c <_puts_r+0x64>
 8001a3a:	686c      	ldr	r4, [r5, #4]
 8001a3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001a3e:	07db      	lsls	r3, r3, #31
 8001a40:	d405      	bmi.n	8001a4e <_puts_r+0x36>
 8001a42:	89a3      	ldrh	r3, [r4, #12]
 8001a44:	0598      	lsls	r0, r3, #22
 8001a46:	d402      	bmi.n	8001a4e <_puts_r+0x36>
 8001a48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a4a:	f000 fad3 	bl	8001ff4 <__retarget_lock_acquire_recursive>
 8001a4e:	89a3      	ldrh	r3, [r4, #12]
 8001a50:	0719      	lsls	r1, r3, #28
 8001a52:	d51d      	bpl.n	8001a90 <_puts_r+0x78>
 8001a54:	6923      	ldr	r3, [r4, #16]
 8001a56:	b1db      	cbz	r3, 8001a90 <_puts_r+0x78>
 8001a58:	3e01      	subs	r6, #1
 8001a5a:	68a3      	ldr	r3, [r4, #8]
 8001a5c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001a60:	3b01      	subs	r3, #1
 8001a62:	60a3      	str	r3, [r4, #8]
 8001a64:	bb39      	cbnz	r1, 8001ab6 <_puts_r+0x9e>
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	da38      	bge.n	8001adc <_puts_r+0xc4>
 8001a6a:	4622      	mov	r2, r4
 8001a6c:	210a      	movs	r1, #10
 8001a6e:	4628      	mov	r0, r5
 8001a70:	f000 f848 	bl	8001b04 <__swbuf_r>
 8001a74:	3001      	adds	r0, #1
 8001a76:	d011      	beq.n	8001a9c <_puts_r+0x84>
 8001a78:	250a      	movs	r5, #10
 8001a7a:	e011      	b.n	8001aa0 <_puts_r+0x88>
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <_puts_r+0xd4>)
 8001a7e:	429c      	cmp	r4, r3
 8001a80:	d101      	bne.n	8001a86 <_puts_r+0x6e>
 8001a82:	68ac      	ldr	r4, [r5, #8]
 8001a84:	e7da      	b.n	8001a3c <_puts_r+0x24>
 8001a86:	4b1a      	ldr	r3, [pc, #104]	; (8001af0 <_puts_r+0xd8>)
 8001a88:	429c      	cmp	r4, r3
 8001a8a:	bf08      	it	eq
 8001a8c:	68ec      	ldreq	r4, [r5, #12]
 8001a8e:	e7d5      	b.n	8001a3c <_puts_r+0x24>
 8001a90:	4621      	mov	r1, r4
 8001a92:	4628      	mov	r0, r5
 8001a94:	f000 f888 	bl	8001ba8 <__swsetup_r>
 8001a98:	2800      	cmp	r0, #0
 8001a9a:	d0dd      	beq.n	8001a58 <_puts_r+0x40>
 8001a9c:	f04f 35ff 	mov.w	r5, #4294967295
 8001aa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001aa2:	07da      	lsls	r2, r3, #31
 8001aa4:	d405      	bmi.n	8001ab2 <_puts_r+0x9a>
 8001aa6:	89a3      	ldrh	r3, [r4, #12]
 8001aa8:	059b      	lsls	r3, r3, #22
 8001aaa:	d402      	bmi.n	8001ab2 <_puts_r+0x9a>
 8001aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001aae:	f000 faa2 	bl	8001ff6 <__retarget_lock_release_recursive>
 8001ab2:	4628      	mov	r0, r5
 8001ab4:	bd70      	pop	{r4, r5, r6, pc}
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	da04      	bge.n	8001ac4 <_puts_r+0xac>
 8001aba:	69a2      	ldr	r2, [r4, #24]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	dc06      	bgt.n	8001ace <_puts_r+0xb6>
 8001ac0:	290a      	cmp	r1, #10
 8001ac2:	d004      	beq.n	8001ace <_puts_r+0xb6>
 8001ac4:	6823      	ldr	r3, [r4, #0]
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	6022      	str	r2, [r4, #0]
 8001aca:	7019      	strb	r1, [r3, #0]
 8001acc:	e7c5      	b.n	8001a5a <_puts_r+0x42>
 8001ace:	4622      	mov	r2, r4
 8001ad0:	4628      	mov	r0, r5
 8001ad2:	f000 f817 	bl	8001b04 <__swbuf_r>
 8001ad6:	3001      	adds	r0, #1
 8001ad8:	d1bf      	bne.n	8001a5a <_puts_r+0x42>
 8001ada:	e7df      	b.n	8001a9c <_puts_r+0x84>
 8001adc:	6823      	ldr	r3, [r4, #0]
 8001ade:	250a      	movs	r5, #10
 8001ae0:	1c5a      	adds	r2, r3, #1
 8001ae2:	6022      	str	r2, [r4, #0]
 8001ae4:	701d      	strb	r5, [r3, #0]
 8001ae6:	e7db      	b.n	8001aa0 <_puts_r+0x88>
 8001ae8:	08002448 	.word	0x08002448
 8001aec:	08002468 	.word	0x08002468
 8001af0:	08002428 	.word	0x08002428

08001af4 <puts>:
 8001af4:	4b02      	ldr	r3, [pc, #8]	; (8001b00 <puts+0xc>)
 8001af6:	4601      	mov	r1, r0
 8001af8:	6818      	ldr	r0, [r3, #0]
 8001afa:	f7ff bf8d 	b.w	8001a18 <_puts_r>
 8001afe:	bf00      	nop
 8001b00:	2000001c 	.word	0x2000001c

08001b04 <__swbuf_r>:
 8001b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b06:	460e      	mov	r6, r1
 8001b08:	4614      	mov	r4, r2
 8001b0a:	4605      	mov	r5, r0
 8001b0c:	b118      	cbz	r0, 8001b16 <__swbuf_r+0x12>
 8001b0e:	6983      	ldr	r3, [r0, #24]
 8001b10:	b90b      	cbnz	r3, 8001b16 <__swbuf_r+0x12>
 8001b12:	f000 f9d1 	bl	8001eb8 <__sinit>
 8001b16:	4b21      	ldr	r3, [pc, #132]	; (8001b9c <__swbuf_r+0x98>)
 8001b18:	429c      	cmp	r4, r3
 8001b1a:	d12b      	bne.n	8001b74 <__swbuf_r+0x70>
 8001b1c:	686c      	ldr	r4, [r5, #4]
 8001b1e:	69a3      	ldr	r3, [r4, #24]
 8001b20:	60a3      	str	r3, [r4, #8]
 8001b22:	89a3      	ldrh	r3, [r4, #12]
 8001b24:	071a      	lsls	r2, r3, #28
 8001b26:	d52f      	bpl.n	8001b88 <__swbuf_r+0x84>
 8001b28:	6923      	ldr	r3, [r4, #16]
 8001b2a:	b36b      	cbz	r3, 8001b88 <__swbuf_r+0x84>
 8001b2c:	6923      	ldr	r3, [r4, #16]
 8001b2e:	6820      	ldr	r0, [r4, #0]
 8001b30:	1ac0      	subs	r0, r0, r3
 8001b32:	6963      	ldr	r3, [r4, #20]
 8001b34:	b2f6      	uxtb	r6, r6
 8001b36:	4283      	cmp	r3, r0
 8001b38:	4637      	mov	r7, r6
 8001b3a:	dc04      	bgt.n	8001b46 <__swbuf_r+0x42>
 8001b3c:	4621      	mov	r1, r4
 8001b3e:	4628      	mov	r0, r5
 8001b40:	f000 f926 	bl	8001d90 <_fflush_r>
 8001b44:	bb30      	cbnz	r0, 8001b94 <__swbuf_r+0x90>
 8001b46:	68a3      	ldr	r3, [r4, #8]
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	60a3      	str	r3, [r4, #8]
 8001b4c:	6823      	ldr	r3, [r4, #0]
 8001b4e:	1c5a      	adds	r2, r3, #1
 8001b50:	6022      	str	r2, [r4, #0]
 8001b52:	701e      	strb	r6, [r3, #0]
 8001b54:	6963      	ldr	r3, [r4, #20]
 8001b56:	3001      	adds	r0, #1
 8001b58:	4283      	cmp	r3, r0
 8001b5a:	d004      	beq.n	8001b66 <__swbuf_r+0x62>
 8001b5c:	89a3      	ldrh	r3, [r4, #12]
 8001b5e:	07db      	lsls	r3, r3, #31
 8001b60:	d506      	bpl.n	8001b70 <__swbuf_r+0x6c>
 8001b62:	2e0a      	cmp	r6, #10
 8001b64:	d104      	bne.n	8001b70 <__swbuf_r+0x6c>
 8001b66:	4621      	mov	r1, r4
 8001b68:	4628      	mov	r0, r5
 8001b6a:	f000 f911 	bl	8001d90 <_fflush_r>
 8001b6e:	b988      	cbnz	r0, 8001b94 <__swbuf_r+0x90>
 8001b70:	4638      	mov	r0, r7
 8001b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b74:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <__swbuf_r+0x9c>)
 8001b76:	429c      	cmp	r4, r3
 8001b78:	d101      	bne.n	8001b7e <__swbuf_r+0x7a>
 8001b7a:	68ac      	ldr	r4, [r5, #8]
 8001b7c:	e7cf      	b.n	8001b1e <__swbuf_r+0x1a>
 8001b7e:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <__swbuf_r+0xa0>)
 8001b80:	429c      	cmp	r4, r3
 8001b82:	bf08      	it	eq
 8001b84:	68ec      	ldreq	r4, [r5, #12]
 8001b86:	e7ca      	b.n	8001b1e <__swbuf_r+0x1a>
 8001b88:	4621      	mov	r1, r4
 8001b8a:	4628      	mov	r0, r5
 8001b8c:	f000 f80c 	bl	8001ba8 <__swsetup_r>
 8001b90:	2800      	cmp	r0, #0
 8001b92:	d0cb      	beq.n	8001b2c <__swbuf_r+0x28>
 8001b94:	f04f 37ff 	mov.w	r7, #4294967295
 8001b98:	e7ea      	b.n	8001b70 <__swbuf_r+0x6c>
 8001b9a:	bf00      	nop
 8001b9c:	08002448 	.word	0x08002448
 8001ba0:	08002468 	.word	0x08002468
 8001ba4:	08002428 	.word	0x08002428

08001ba8 <__swsetup_r>:
 8001ba8:	4b32      	ldr	r3, [pc, #200]	; (8001c74 <__swsetup_r+0xcc>)
 8001baa:	b570      	push	{r4, r5, r6, lr}
 8001bac:	681d      	ldr	r5, [r3, #0]
 8001bae:	4606      	mov	r6, r0
 8001bb0:	460c      	mov	r4, r1
 8001bb2:	b125      	cbz	r5, 8001bbe <__swsetup_r+0x16>
 8001bb4:	69ab      	ldr	r3, [r5, #24]
 8001bb6:	b913      	cbnz	r3, 8001bbe <__swsetup_r+0x16>
 8001bb8:	4628      	mov	r0, r5
 8001bba:	f000 f97d 	bl	8001eb8 <__sinit>
 8001bbe:	4b2e      	ldr	r3, [pc, #184]	; (8001c78 <__swsetup_r+0xd0>)
 8001bc0:	429c      	cmp	r4, r3
 8001bc2:	d10f      	bne.n	8001be4 <__swsetup_r+0x3c>
 8001bc4:	686c      	ldr	r4, [r5, #4]
 8001bc6:	89a3      	ldrh	r3, [r4, #12]
 8001bc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001bcc:	0719      	lsls	r1, r3, #28
 8001bce:	d42c      	bmi.n	8001c2a <__swsetup_r+0x82>
 8001bd0:	06dd      	lsls	r5, r3, #27
 8001bd2:	d411      	bmi.n	8001bf8 <__swsetup_r+0x50>
 8001bd4:	2309      	movs	r3, #9
 8001bd6:	6033      	str	r3, [r6, #0]
 8001bd8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001bdc:	81a3      	strh	r3, [r4, #12]
 8001bde:	f04f 30ff 	mov.w	r0, #4294967295
 8001be2:	e03e      	b.n	8001c62 <__swsetup_r+0xba>
 8001be4:	4b25      	ldr	r3, [pc, #148]	; (8001c7c <__swsetup_r+0xd4>)
 8001be6:	429c      	cmp	r4, r3
 8001be8:	d101      	bne.n	8001bee <__swsetup_r+0x46>
 8001bea:	68ac      	ldr	r4, [r5, #8]
 8001bec:	e7eb      	b.n	8001bc6 <__swsetup_r+0x1e>
 8001bee:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <__swsetup_r+0xd8>)
 8001bf0:	429c      	cmp	r4, r3
 8001bf2:	bf08      	it	eq
 8001bf4:	68ec      	ldreq	r4, [r5, #12]
 8001bf6:	e7e6      	b.n	8001bc6 <__swsetup_r+0x1e>
 8001bf8:	0758      	lsls	r0, r3, #29
 8001bfa:	d512      	bpl.n	8001c22 <__swsetup_r+0x7a>
 8001bfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001bfe:	b141      	cbz	r1, 8001c12 <__swsetup_r+0x6a>
 8001c00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c04:	4299      	cmp	r1, r3
 8001c06:	d002      	beq.n	8001c0e <__swsetup_r+0x66>
 8001c08:	4630      	mov	r0, r6
 8001c0a:	f000 fa59 	bl	80020c0 <_free_r>
 8001c0e:	2300      	movs	r3, #0
 8001c10:	6363      	str	r3, [r4, #52]	; 0x34
 8001c12:	89a3      	ldrh	r3, [r4, #12]
 8001c14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001c18:	81a3      	strh	r3, [r4, #12]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	6063      	str	r3, [r4, #4]
 8001c1e:	6923      	ldr	r3, [r4, #16]
 8001c20:	6023      	str	r3, [r4, #0]
 8001c22:	89a3      	ldrh	r3, [r4, #12]
 8001c24:	f043 0308 	orr.w	r3, r3, #8
 8001c28:	81a3      	strh	r3, [r4, #12]
 8001c2a:	6923      	ldr	r3, [r4, #16]
 8001c2c:	b94b      	cbnz	r3, 8001c42 <__swsetup_r+0x9a>
 8001c2e:	89a3      	ldrh	r3, [r4, #12]
 8001c30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c38:	d003      	beq.n	8001c42 <__swsetup_r+0x9a>
 8001c3a:	4621      	mov	r1, r4
 8001c3c:	4630      	mov	r0, r6
 8001c3e:	f000 f9ff 	bl	8002040 <__smakebuf_r>
 8001c42:	89a0      	ldrh	r0, [r4, #12]
 8001c44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c48:	f010 0301 	ands.w	r3, r0, #1
 8001c4c:	d00a      	beq.n	8001c64 <__swsetup_r+0xbc>
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60a3      	str	r3, [r4, #8]
 8001c52:	6963      	ldr	r3, [r4, #20]
 8001c54:	425b      	negs	r3, r3
 8001c56:	61a3      	str	r3, [r4, #24]
 8001c58:	6923      	ldr	r3, [r4, #16]
 8001c5a:	b943      	cbnz	r3, 8001c6e <__swsetup_r+0xc6>
 8001c5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001c60:	d1ba      	bne.n	8001bd8 <__swsetup_r+0x30>
 8001c62:	bd70      	pop	{r4, r5, r6, pc}
 8001c64:	0781      	lsls	r1, r0, #30
 8001c66:	bf58      	it	pl
 8001c68:	6963      	ldrpl	r3, [r4, #20]
 8001c6a:	60a3      	str	r3, [r4, #8]
 8001c6c:	e7f4      	b.n	8001c58 <__swsetup_r+0xb0>
 8001c6e:	2000      	movs	r0, #0
 8001c70:	e7f7      	b.n	8001c62 <__swsetup_r+0xba>
 8001c72:	bf00      	nop
 8001c74:	2000001c 	.word	0x2000001c
 8001c78:	08002448 	.word	0x08002448
 8001c7c:	08002468 	.word	0x08002468
 8001c80:	08002428 	.word	0x08002428

08001c84 <__sflush_r>:
 8001c84:	898a      	ldrh	r2, [r1, #12]
 8001c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c8a:	4605      	mov	r5, r0
 8001c8c:	0710      	lsls	r0, r2, #28
 8001c8e:	460c      	mov	r4, r1
 8001c90:	d458      	bmi.n	8001d44 <__sflush_r+0xc0>
 8001c92:	684b      	ldr	r3, [r1, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	dc05      	bgt.n	8001ca4 <__sflush_r+0x20>
 8001c98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	dc02      	bgt.n	8001ca4 <__sflush_r+0x20>
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ca4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001ca6:	2e00      	cmp	r6, #0
 8001ca8:	d0f9      	beq.n	8001c9e <__sflush_r+0x1a>
 8001caa:	2300      	movs	r3, #0
 8001cac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001cb0:	682f      	ldr	r7, [r5, #0]
 8001cb2:	602b      	str	r3, [r5, #0]
 8001cb4:	d032      	beq.n	8001d1c <__sflush_r+0x98>
 8001cb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001cb8:	89a3      	ldrh	r3, [r4, #12]
 8001cba:	075a      	lsls	r2, r3, #29
 8001cbc:	d505      	bpl.n	8001cca <__sflush_r+0x46>
 8001cbe:	6863      	ldr	r3, [r4, #4]
 8001cc0:	1ac0      	subs	r0, r0, r3
 8001cc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001cc4:	b10b      	cbz	r3, 8001cca <__sflush_r+0x46>
 8001cc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cc8:	1ac0      	subs	r0, r0, r3
 8001cca:	2300      	movs	r3, #0
 8001ccc:	4602      	mov	r2, r0
 8001cce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001cd0:	6a21      	ldr	r1, [r4, #32]
 8001cd2:	4628      	mov	r0, r5
 8001cd4:	47b0      	blx	r6
 8001cd6:	1c43      	adds	r3, r0, #1
 8001cd8:	89a3      	ldrh	r3, [r4, #12]
 8001cda:	d106      	bne.n	8001cea <__sflush_r+0x66>
 8001cdc:	6829      	ldr	r1, [r5, #0]
 8001cde:	291d      	cmp	r1, #29
 8001ce0:	d82c      	bhi.n	8001d3c <__sflush_r+0xb8>
 8001ce2:	4a2a      	ldr	r2, [pc, #168]	; (8001d8c <__sflush_r+0x108>)
 8001ce4:	40ca      	lsrs	r2, r1
 8001ce6:	07d6      	lsls	r6, r2, #31
 8001ce8:	d528      	bpl.n	8001d3c <__sflush_r+0xb8>
 8001cea:	2200      	movs	r2, #0
 8001cec:	6062      	str	r2, [r4, #4]
 8001cee:	04d9      	lsls	r1, r3, #19
 8001cf0:	6922      	ldr	r2, [r4, #16]
 8001cf2:	6022      	str	r2, [r4, #0]
 8001cf4:	d504      	bpl.n	8001d00 <__sflush_r+0x7c>
 8001cf6:	1c42      	adds	r2, r0, #1
 8001cf8:	d101      	bne.n	8001cfe <__sflush_r+0x7a>
 8001cfa:	682b      	ldr	r3, [r5, #0]
 8001cfc:	b903      	cbnz	r3, 8001d00 <__sflush_r+0x7c>
 8001cfe:	6560      	str	r0, [r4, #84]	; 0x54
 8001d00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d02:	602f      	str	r7, [r5, #0]
 8001d04:	2900      	cmp	r1, #0
 8001d06:	d0ca      	beq.n	8001c9e <__sflush_r+0x1a>
 8001d08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d0c:	4299      	cmp	r1, r3
 8001d0e:	d002      	beq.n	8001d16 <__sflush_r+0x92>
 8001d10:	4628      	mov	r0, r5
 8001d12:	f000 f9d5 	bl	80020c0 <_free_r>
 8001d16:	2000      	movs	r0, #0
 8001d18:	6360      	str	r0, [r4, #52]	; 0x34
 8001d1a:	e7c1      	b.n	8001ca0 <__sflush_r+0x1c>
 8001d1c:	6a21      	ldr	r1, [r4, #32]
 8001d1e:	2301      	movs	r3, #1
 8001d20:	4628      	mov	r0, r5
 8001d22:	47b0      	blx	r6
 8001d24:	1c41      	adds	r1, r0, #1
 8001d26:	d1c7      	bne.n	8001cb8 <__sflush_r+0x34>
 8001d28:	682b      	ldr	r3, [r5, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0c4      	beq.n	8001cb8 <__sflush_r+0x34>
 8001d2e:	2b1d      	cmp	r3, #29
 8001d30:	d001      	beq.n	8001d36 <__sflush_r+0xb2>
 8001d32:	2b16      	cmp	r3, #22
 8001d34:	d101      	bne.n	8001d3a <__sflush_r+0xb6>
 8001d36:	602f      	str	r7, [r5, #0]
 8001d38:	e7b1      	b.n	8001c9e <__sflush_r+0x1a>
 8001d3a:	89a3      	ldrh	r3, [r4, #12]
 8001d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d40:	81a3      	strh	r3, [r4, #12]
 8001d42:	e7ad      	b.n	8001ca0 <__sflush_r+0x1c>
 8001d44:	690f      	ldr	r7, [r1, #16]
 8001d46:	2f00      	cmp	r7, #0
 8001d48:	d0a9      	beq.n	8001c9e <__sflush_r+0x1a>
 8001d4a:	0793      	lsls	r3, r2, #30
 8001d4c:	680e      	ldr	r6, [r1, #0]
 8001d4e:	bf08      	it	eq
 8001d50:	694b      	ldreq	r3, [r1, #20]
 8001d52:	600f      	str	r7, [r1, #0]
 8001d54:	bf18      	it	ne
 8001d56:	2300      	movne	r3, #0
 8001d58:	eba6 0807 	sub.w	r8, r6, r7
 8001d5c:	608b      	str	r3, [r1, #8]
 8001d5e:	f1b8 0f00 	cmp.w	r8, #0
 8001d62:	dd9c      	ble.n	8001c9e <__sflush_r+0x1a>
 8001d64:	6a21      	ldr	r1, [r4, #32]
 8001d66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001d68:	4643      	mov	r3, r8
 8001d6a:	463a      	mov	r2, r7
 8001d6c:	4628      	mov	r0, r5
 8001d6e:	47b0      	blx	r6
 8001d70:	2800      	cmp	r0, #0
 8001d72:	dc06      	bgt.n	8001d82 <__sflush_r+0xfe>
 8001d74:	89a3      	ldrh	r3, [r4, #12]
 8001d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d7a:	81a3      	strh	r3, [r4, #12]
 8001d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d80:	e78e      	b.n	8001ca0 <__sflush_r+0x1c>
 8001d82:	4407      	add	r7, r0
 8001d84:	eba8 0800 	sub.w	r8, r8, r0
 8001d88:	e7e9      	b.n	8001d5e <__sflush_r+0xda>
 8001d8a:	bf00      	nop
 8001d8c:	20400001 	.word	0x20400001

08001d90 <_fflush_r>:
 8001d90:	b538      	push	{r3, r4, r5, lr}
 8001d92:	690b      	ldr	r3, [r1, #16]
 8001d94:	4605      	mov	r5, r0
 8001d96:	460c      	mov	r4, r1
 8001d98:	b913      	cbnz	r3, 8001da0 <_fflush_r+0x10>
 8001d9a:	2500      	movs	r5, #0
 8001d9c:	4628      	mov	r0, r5
 8001d9e:	bd38      	pop	{r3, r4, r5, pc}
 8001da0:	b118      	cbz	r0, 8001daa <_fflush_r+0x1a>
 8001da2:	6983      	ldr	r3, [r0, #24]
 8001da4:	b90b      	cbnz	r3, 8001daa <_fflush_r+0x1a>
 8001da6:	f000 f887 	bl	8001eb8 <__sinit>
 8001daa:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <_fflush_r+0x6c>)
 8001dac:	429c      	cmp	r4, r3
 8001dae:	d11b      	bne.n	8001de8 <_fflush_r+0x58>
 8001db0:	686c      	ldr	r4, [r5, #4]
 8001db2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0ef      	beq.n	8001d9a <_fflush_r+0xa>
 8001dba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001dbc:	07d0      	lsls	r0, r2, #31
 8001dbe:	d404      	bmi.n	8001dca <_fflush_r+0x3a>
 8001dc0:	0599      	lsls	r1, r3, #22
 8001dc2:	d402      	bmi.n	8001dca <_fflush_r+0x3a>
 8001dc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001dc6:	f000 f915 	bl	8001ff4 <__retarget_lock_acquire_recursive>
 8001dca:	4628      	mov	r0, r5
 8001dcc:	4621      	mov	r1, r4
 8001dce:	f7ff ff59 	bl	8001c84 <__sflush_r>
 8001dd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001dd4:	07da      	lsls	r2, r3, #31
 8001dd6:	4605      	mov	r5, r0
 8001dd8:	d4e0      	bmi.n	8001d9c <_fflush_r+0xc>
 8001dda:	89a3      	ldrh	r3, [r4, #12]
 8001ddc:	059b      	lsls	r3, r3, #22
 8001dde:	d4dd      	bmi.n	8001d9c <_fflush_r+0xc>
 8001de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001de2:	f000 f908 	bl	8001ff6 <__retarget_lock_release_recursive>
 8001de6:	e7d9      	b.n	8001d9c <_fflush_r+0xc>
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <_fflush_r+0x70>)
 8001dea:	429c      	cmp	r4, r3
 8001dec:	d101      	bne.n	8001df2 <_fflush_r+0x62>
 8001dee:	68ac      	ldr	r4, [r5, #8]
 8001df0:	e7df      	b.n	8001db2 <_fflush_r+0x22>
 8001df2:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <_fflush_r+0x74>)
 8001df4:	429c      	cmp	r4, r3
 8001df6:	bf08      	it	eq
 8001df8:	68ec      	ldreq	r4, [r5, #12]
 8001dfa:	e7da      	b.n	8001db2 <_fflush_r+0x22>
 8001dfc:	08002448 	.word	0x08002448
 8001e00:	08002468 	.word	0x08002468
 8001e04:	08002428 	.word	0x08002428

08001e08 <std>:
 8001e08:	2300      	movs	r3, #0
 8001e0a:	b510      	push	{r4, lr}
 8001e0c:	4604      	mov	r4, r0
 8001e0e:	e9c0 3300 	strd	r3, r3, [r0]
 8001e12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001e16:	6083      	str	r3, [r0, #8]
 8001e18:	8181      	strh	r1, [r0, #12]
 8001e1a:	6643      	str	r3, [r0, #100]	; 0x64
 8001e1c:	81c2      	strh	r2, [r0, #14]
 8001e1e:	6183      	str	r3, [r0, #24]
 8001e20:	4619      	mov	r1, r3
 8001e22:	2208      	movs	r2, #8
 8001e24:	305c      	adds	r0, #92	; 0x5c
 8001e26:	f7ff fdef 	bl	8001a08 <memset>
 8001e2a:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <std+0x38>)
 8001e2c:	6263      	str	r3, [r4, #36]	; 0x24
 8001e2e:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <std+0x3c>)
 8001e30:	62a3      	str	r3, [r4, #40]	; 0x28
 8001e32:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <std+0x40>)
 8001e34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001e36:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <std+0x44>)
 8001e38:	6224      	str	r4, [r4, #32]
 8001e3a:	6323      	str	r3, [r4, #48]	; 0x30
 8001e3c:	bd10      	pop	{r4, pc}
 8001e3e:	bf00      	nop
 8001e40:	08002231 	.word	0x08002231
 8001e44:	08002253 	.word	0x08002253
 8001e48:	0800228b 	.word	0x0800228b
 8001e4c:	080022af 	.word	0x080022af

08001e50 <_cleanup_r>:
 8001e50:	4901      	ldr	r1, [pc, #4]	; (8001e58 <_cleanup_r+0x8>)
 8001e52:	f000 b8af 	b.w	8001fb4 <_fwalk_reent>
 8001e56:	bf00      	nop
 8001e58:	08001d91 	.word	0x08001d91

08001e5c <__sfmoreglue>:
 8001e5c:	b570      	push	{r4, r5, r6, lr}
 8001e5e:	1e4a      	subs	r2, r1, #1
 8001e60:	2568      	movs	r5, #104	; 0x68
 8001e62:	4355      	muls	r5, r2
 8001e64:	460e      	mov	r6, r1
 8001e66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001e6a:	f000 f977 	bl	800215c <_malloc_r>
 8001e6e:	4604      	mov	r4, r0
 8001e70:	b140      	cbz	r0, 8001e84 <__sfmoreglue+0x28>
 8001e72:	2100      	movs	r1, #0
 8001e74:	e9c0 1600 	strd	r1, r6, [r0]
 8001e78:	300c      	adds	r0, #12
 8001e7a:	60a0      	str	r0, [r4, #8]
 8001e7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001e80:	f7ff fdc2 	bl	8001a08 <memset>
 8001e84:	4620      	mov	r0, r4
 8001e86:	bd70      	pop	{r4, r5, r6, pc}

08001e88 <__sfp_lock_acquire>:
 8001e88:	4801      	ldr	r0, [pc, #4]	; (8001e90 <__sfp_lock_acquire+0x8>)
 8001e8a:	f000 b8b3 	b.w	8001ff4 <__retarget_lock_acquire_recursive>
 8001e8e:	bf00      	nop
 8001e90:	200000f0 	.word	0x200000f0

08001e94 <__sfp_lock_release>:
 8001e94:	4801      	ldr	r0, [pc, #4]	; (8001e9c <__sfp_lock_release+0x8>)
 8001e96:	f000 b8ae 	b.w	8001ff6 <__retarget_lock_release_recursive>
 8001e9a:	bf00      	nop
 8001e9c:	200000f0 	.word	0x200000f0

08001ea0 <__sinit_lock_acquire>:
 8001ea0:	4801      	ldr	r0, [pc, #4]	; (8001ea8 <__sinit_lock_acquire+0x8>)
 8001ea2:	f000 b8a7 	b.w	8001ff4 <__retarget_lock_acquire_recursive>
 8001ea6:	bf00      	nop
 8001ea8:	200000eb 	.word	0x200000eb

08001eac <__sinit_lock_release>:
 8001eac:	4801      	ldr	r0, [pc, #4]	; (8001eb4 <__sinit_lock_release+0x8>)
 8001eae:	f000 b8a2 	b.w	8001ff6 <__retarget_lock_release_recursive>
 8001eb2:	bf00      	nop
 8001eb4:	200000eb 	.word	0x200000eb

08001eb8 <__sinit>:
 8001eb8:	b510      	push	{r4, lr}
 8001eba:	4604      	mov	r4, r0
 8001ebc:	f7ff fff0 	bl	8001ea0 <__sinit_lock_acquire>
 8001ec0:	69a3      	ldr	r3, [r4, #24]
 8001ec2:	b11b      	cbz	r3, 8001ecc <__sinit+0x14>
 8001ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ec8:	f7ff bff0 	b.w	8001eac <__sinit_lock_release>
 8001ecc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001ed0:	6523      	str	r3, [r4, #80]	; 0x50
 8001ed2:	4b13      	ldr	r3, [pc, #76]	; (8001f20 <__sinit+0x68>)
 8001ed4:	4a13      	ldr	r2, [pc, #76]	; (8001f24 <__sinit+0x6c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	62a2      	str	r2, [r4, #40]	; 0x28
 8001eda:	42a3      	cmp	r3, r4
 8001edc:	bf04      	itt	eq
 8001ede:	2301      	moveq	r3, #1
 8001ee0:	61a3      	streq	r3, [r4, #24]
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	f000 f820 	bl	8001f28 <__sfp>
 8001ee8:	6060      	str	r0, [r4, #4]
 8001eea:	4620      	mov	r0, r4
 8001eec:	f000 f81c 	bl	8001f28 <__sfp>
 8001ef0:	60a0      	str	r0, [r4, #8]
 8001ef2:	4620      	mov	r0, r4
 8001ef4:	f000 f818 	bl	8001f28 <__sfp>
 8001ef8:	2200      	movs	r2, #0
 8001efa:	60e0      	str	r0, [r4, #12]
 8001efc:	2104      	movs	r1, #4
 8001efe:	6860      	ldr	r0, [r4, #4]
 8001f00:	f7ff ff82 	bl	8001e08 <std>
 8001f04:	68a0      	ldr	r0, [r4, #8]
 8001f06:	2201      	movs	r2, #1
 8001f08:	2109      	movs	r1, #9
 8001f0a:	f7ff ff7d 	bl	8001e08 <std>
 8001f0e:	68e0      	ldr	r0, [r4, #12]
 8001f10:	2202      	movs	r2, #2
 8001f12:	2112      	movs	r1, #18
 8001f14:	f7ff ff78 	bl	8001e08 <std>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	61a3      	str	r3, [r4, #24]
 8001f1c:	e7d2      	b.n	8001ec4 <__sinit+0xc>
 8001f1e:	bf00      	nop
 8001f20:	08002424 	.word	0x08002424
 8001f24:	08001e51 	.word	0x08001e51

08001f28 <__sfp>:
 8001f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f2a:	4607      	mov	r7, r0
 8001f2c:	f7ff ffac 	bl	8001e88 <__sfp_lock_acquire>
 8001f30:	4b1e      	ldr	r3, [pc, #120]	; (8001fac <__sfp+0x84>)
 8001f32:	681e      	ldr	r6, [r3, #0]
 8001f34:	69b3      	ldr	r3, [r6, #24]
 8001f36:	b913      	cbnz	r3, 8001f3e <__sfp+0x16>
 8001f38:	4630      	mov	r0, r6
 8001f3a:	f7ff ffbd 	bl	8001eb8 <__sinit>
 8001f3e:	3648      	adds	r6, #72	; 0x48
 8001f40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001f44:	3b01      	subs	r3, #1
 8001f46:	d503      	bpl.n	8001f50 <__sfp+0x28>
 8001f48:	6833      	ldr	r3, [r6, #0]
 8001f4a:	b30b      	cbz	r3, 8001f90 <__sfp+0x68>
 8001f4c:	6836      	ldr	r6, [r6, #0]
 8001f4e:	e7f7      	b.n	8001f40 <__sfp+0x18>
 8001f50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001f54:	b9d5      	cbnz	r5, 8001f8c <__sfp+0x64>
 8001f56:	4b16      	ldr	r3, [pc, #88]	; (8001fb0 <__sfp+0x88>)
 8001f58:	60e3      	str	r3, [r4, #12]
 8001f5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001f5e:	6665      	str	r5, [r4, #100]	; 0x64
 8001f60:	f000 f847 	bl	8001ff2 <__retarget_lock_init_recursive>
 8001f64:	f7ff ff96 	bl	8001e94 <__sfp_lock_release>
 8001f68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001f6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001f70:	6025      	str	r5, [r4, #0]
 8001f72:	61a5      	str	r5, [r4, #24]
 8001f74:	2208      	movs	r2, #8
 8001f76:	4629      	mov	r1, r5
 8001f78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001f7c:	f7ff fd44 	bl	8001a08 <memset>
 8001f80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001f84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001f88:	4620      	mov	r0, r4
 8001f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f8c:	3468      	adds	r4, #104	; 0x68
 8001f8e:	e7d9      	b.n	8001f44 <__sfp+0x1c>
 8001f90:	2104      	movs	r1, #4
 8001f92:	4638      	mov	r0, r7
 8001f94:	f7ff ff62 	bl	8001e5c <__sfmoreglue>
 8001f98:	4604      	mov	r4, r0
 8001f9a:	6030      	str	r0, [r6, #0]
 8001f9c:	2800      	cmp	r0, #0
 8001f9e:	d1d5      	bne.n	8001f4c <__sfp+0x24>
 8001fa0:	f7ff ff78 	bl	8001e94 <__sfp_lock_release>
 8001fa4:	230c      	movs	r3, #12
 8001fa6:	603b      	str	r3, [r7, #0]
 8001fa8:	e7ee      	b.n	8001f88 <__sfp+0x60>
 8001faa:	bf00      	nop
 8001fac:	08002424 	.word	0x08002424
 8001fb0:	ffff0001 	.word	0xffff0001

08001fb4 <_fwalk_reent>:
 8001fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fb8:	4606      	mov	r6, r0
 8001fba:	4688      	mov	r8, r1
 8001fbc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001fc0:	2700      	movs	r7, #0
 8001fc2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001fc6:	f1b9 0901 	subs.w	r9, r9, #1
 8001fca:	d505      	bpl.n	8001fd8 <_fwalk_reent+0x24>
 8001fcc:	6824      	ldr	r4, [r4, #0]
 8001fce:	2c00      	cmp	r4, #0
 8001fd0:	d1f7      	bne.n	8001fc2 <_fwalk_reent+0xe>
 8001fd2:	4638      	mov	r0, r7
 8001fd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001fd8:	89ab      	ldrh	r3, [r5, #12]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d907      	bls.n	8001fee <_fwalk_reent+0x3a>
 8001fde:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	d003      	beq.n	8001fee <_fwalk_reent+0x3a>
 8001fe6:	4629      	mov	r1, r5
 8001fe8:	4630      	mov	r0, r6
 8001fea:	47c0      	blx	r8
 8001fec:	4307      	orrs	r7, r0
 8001fee:	3568      	adds	r5, #104	; 0x68
 8001ff0:	e7e9      	b.n	8001fc6 <_fwalk_reent+0x12>

08001ff2 <__retarget_lock_init_recursive>:
 8001ff2:	4770      	bx	lr

08001ff4 <__retarget_lock_acquire_recursive>:
 8001ff4:	4770      	bx	lr

08001ff6 <__retarget_lock_release_recursive>:
 8001ff6:	4770      	bx	lr

08001ff8 <__swhatbuf_r>:
 8001ff8:	b570      	push	{r4, r5, r6, lr}
 8001ffa:	460e      	mov	r6, r1
 8001ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002000:	2900      	cmp	r1, #0
 8002002:	b096      	sub	sp, #88	; 0x58
 8002004:	4614      	mov	r4, r2
 8002006:	461d      	mov	r5, r3
 8002008:	da07      	bge.n	800201a <__swhatbuf_r+0x22>
 800200a:	2300      	movs	r3, #0
 800200c:	602b      	str	r3, [r5, #0]
 800200e:	89b3      	ldrh	r3, [r6, #12]
 8002010:	061a      	lsls	r2, r3, #24
 8002012:	d410      	bmi.n	8002036 <__swhatbuf_r+0x3e>
 8002014:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002018:	e00e      	b.n	8002038 <__swhatbuf_r+0x40>
 800201a:	466a      	mov	r2, sp
 800201c:	f000 f96e 	bl	80022fc <_fstat_r>
 8002020:	2800      	cmp	r0, #0
 8002022:	dbf2      	blt.n	800200a <__swhatbuf_r+0x12>
 8002024:	9a01      	ldr	r2, [sp, #4]
 8002026:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800202a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800202e:	425a      	negs	r2, r3
 8002030:	415a      	adcs	r2, r3
 8002032:	602a      	str	r2, [r5, #0]
 8002034:	e7ee      	b.n	8002014 <__swhatbuf_r+0x1c>
 8002036:	2340      	movs	r3, #64	; 0x40
 8002038:	2000      	movs	r0, #0
 800203a:	6023      	str	r3, [r4, #0]
 800203c:	b016      	add	sp, #88	; 0x58
 800203e:	bd70      	pop	{r4, r5, r6, pc}

08002040 <__smakebuf_r>:
 8002040:	898b      	ldrh	r3, [r1, #12]
 8002042:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002044:	079d      	lsls	r5, r3, #30
 8002046:	4606      	mov	r6, r0
 8002048:	460c      	mov	r4, r1
 800204a:	d507      	bpl.n	800205c <__smakebuf_r+0x1c>
 800204c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002050:	6023      	str	r3, [r4, #0]
 8002052:	6123      	str	r3, [r4, #16]
 8002054:	2301      	movs	r3, #1
 8002056:	6163      	str	r3, [r4, #20]
 8002058:	b002      	add	sp, #8
 800205a:	bd70      	pop	{r4, r5, r6, pc}
 800205c:	ab01      	add	r3, sp, #4
 800205e:	466a      	mov	r2, sp
 8002060:	f7ff ffca 	bl	8001ff8 <__swhatbuf_r>
 8002064:	9900      	ldr	r1, [sp, #0]
 8002066:	4605      	mov	r5, r0
 8002068:	4630      	mov	r0, r6
 800206a:	f000 f877 	bl	800215c <_malloc_r>
 800206e:	b948      	cbnz	r0, 8002084 <__smakebuf_r+0x44>
 8002070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002074:	059a      	lsls	r2, r3, #22
 8002076:	d4ef      	bmi.n	8002058 <__smakebuf_r+0x18>
 8002078:	f023 0303 	bic.w	r3, r3, #3
 800207c:	f043 0302 	orr.w	r3, r3, #2
 8002080:	81a3      	strh	r3, [r4, #12]
 8002082:	e7e3      	b.n	800204c <__smakebuf_r+0xc>
 8002084:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <__smakebuf_r+0x7c>)
 8002086:	62b3      	str	r3, [r6, #40]	; 0x28
 8002088:	89a3      	ldrh	r3, [r4, #12]
 800208a:	6020      	str	r0, [r4, #0]
 800208c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002090:	81a3      	strh	r3, [r4, #12]
 8002092:	9b00      	ldr	r3, [sp, #0]
 8002094:	6163      	str	r3, [r4, #20]
 8002096:	9b01      	ldr	r3, [sp, #4]
 8002098:	6120      	str	r0, [r4, #16]
 800209a:	b15b      	cbz	r3, 80020b4 <__smakebuf_r+0x74>
 800209c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80020a0:	4630      	mov	r0, r6
 80020a2:	f000 f93d 	bl	8002320 <_isatty_r>
 80020a6:	b128      	cbz	r0, 80020b4 <__smakebuf_r+0x74>
 80020a8:	89a3      	ldrh	r3, [r4, #12]
 80020aa:	f023 0303 	bic.w	r3, r3, #3
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	81a3      	strh	r3, [r4, #12]
 80020b4:	89a0      	ldrh	r0, [r4, #12]
 80020b6:	4305      	orrs	r5, r0
 80020b8:	81a5      	strh	r5, [r4, #12]
 80020ba:	e7cd      	b.n	8002058 <__smakebuf_r+0x18>
 80020bc:	08001e51 	.word	0x08001e51

080020c0 <_free_r>:
 80020c0:	b538      	push	{r3, r4, r5, lr}
 80020c2:	4605      	mov	r5, r0
 80020c4:	2900      	cmp	r1, #0
 80020c6:	d045      	beq.n	8002154 <_free_r+0x94>
 80020c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80020cc:	1f0c      	subs	r4, r1, #4
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	bfb8      	it	lt
 80020d2:	18e4      	addlt	r4, r4, r3
 80020d4:	f000 f946 	bl	8002364 <__malloc_lock>
 80020d8:	4a1f      	ldr	r2, [pc, #124]	; (8002158 <_free_r+0x98>)
 80020da:	6813      	ldr	r3, [r2, #0]
 80020dc:	4610      	mov	r0, r2
 80020de:	b933      	cbnz	r3, 80020ee <_free_r+0x2e>
 80020e0:	6063      	str	r3, [r4, #4]
 80020e2:	6014      	str	r4, [r2, #0]
 80020e4:	4628      	mov	r0, r5
 80020e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020ea:	f000 b941 	b.w	8002370 <__malloc_unlock>
 80020ee:	42a3      	cmp	r3, r4
 80020f0:	d90b      	bls.n	800210a <_free_r+0x4a>
 80020f2:	6821      	ldr	r1, [r4, #0]
 80020f4:	1862      	adds	r2, r4, r1
 80020f6:	4293      	cmp	r3, r2
 80020f8:	bf04      	itt	eq
 80020fa:	681a      	ldreq	r2, [r3, #0]
 80020fc:	685b      	ldreq	r3, [r3, #4]
 80020fe:	6063      	str	r3, [r4, #4]
 8002100:	bf04      	itt	eq
 8002102:	1852      	addeq	r2, r2, r1
 8002104:	6022      	streq	r2, [r4, #0]
 8002106:	6004      	str	r4, [r0, #0]
 8002108:	e7ec      	b.n	80020e4 <_free_r+0x24>
 800210a:	461a      	mov	r2, r3
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	b10b      	cbz	r3, 8002114 <_free_r+0x54>
 8002110:	42a3      	cmp	r3, r4
 8002112:	d9fa      	bls.n	800210a <_free_r+0x4a>
 8002114:	6811      	ldr	r1, [r2, #0]
 8002116:	1850      	adds	r0, r2, r1
 8002118:	42a0      	cmp	r0, r4
 800211a:	d10b      	bne.n	8002134 <_free_r+0x74>
 800211c:	6820      	ldr	r0, [r4, #0]
 800211e:	4401      	add	r1, r0
 8002120:	1850      	adds	r0, r2, r1
 8002122:	4283      	cmp	r3, r0
 8002124:	6011      	str	r1, [r2, #0]
 8002126:	d1dd      	bne.n	80020e4 <_free_r+0x24>
 8002128:	6818      	ldr	r0, [r3, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	6053      	str	r3, [r2, #4]
 800212e:	4401      	add	r1, r0
 8002130:	6011      	str	r1, [r2, #0]
 8002132:	e7d7      	b.n	80020e4 <_free_r+0x24>
 8002134:	d902      	bls.n	800213c <_free_r+0x7c>
 8002136:	230c      	movs	r3, #12
 8002138:	602b      	str	r3, [r5, #0]
 800213a:	e7d3      	b.n	80020e4 <_free_r+0x24>
 800213c:	6820      	ldr	r0, [r4, #0]
 800213e:	1821      	adds	r1, r4, r0
 8002140:	428b      	cmp	r3, r1
 8002142:	bf04      	itt	eq
 8002144:	6819      	ldreq	r1, [r3, #0]
 8002146:	685b      	ldreq	r3, [r3, #4]
 8002148:	6063      	str	r3, [r4, #4]
 800214a:	bf04      	itt	eq
 800214c:	1809      	addeq	r1, r1, r0
 800214e:	6021      	streq	r1, [r4, #0]
 8002150:	6054      	str	r4, [r2, #4]
 8002152:	e7c7      	b.n	80020e4 <_free_r+0x24>
 8002154:	bd38      	pop	{r3, r4, r5, pc}
 8002156:	bf00      	nop
 8002158:	200000b8 	.word	0x200000b8

0800215c <_malloc_r>:
 800215c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800215e:	1ccd      	adds	r5, r1, #3
 8002160:	f025 0503 	bic.w	r5, r5, #3
 8002164:	3508      	adds	r5, #8
 8002166:	2d0c      	cmp	r5, #12
 8002168:	bf38      	it	cc
 800216a:	250c      	movcc	r5, #12
 800216c:	2d00      	cmp	r5, #0
 800216e:	4606      	mov	r6, r0
 8002170:	db01      	blt.n	8002176 <_malloc_r+0x1a>
 8002172:	42a9      	cmp	r1, r5
 8002174:	d903      	bls.n	800217e <_malloc_r+0x22>
 8002176:	230c      	movs	r3, #12
 8002178:	6033      	str	r3, [r6, #0]
 800217a:	2000      	movs	r0, #0
 800217c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800217e:	f000 f8f1 	bl	8002364 <__malloc_lock>
 8002182:	4921      	ldr	r1, [pc, #132]	; (8002208 <_malloc_r+0xac>)
 8002184:	680a      	ldr	r2, [r1, #0]
 8002186:	4614      	mov	r4, r2
 8002188:	b99c      	cbnz	r4, 80021b2 <_malloc_r+0x56>
 800218a:	4f20      	ldr	r7, [pc, #128]	; (800220c <_malloc_r+0xb0>)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	b923      	cbnz	r3, 800219a <_malloc_r+0x3e>
 8002190:	4621      	mov	r1, r4
 8002192:	4630      	mov	r0, r6
 8002194:	f000 f83c 	bl	8002210 <_sbrk_r>
 8002198:	6038      	str	r0, [r7, #0]
 800219a:	4629      	mov	r1, r5
 800219c:	4630      	mov	r0, r6
 800219e:	f000 f837 	bl	8002210 <_sbrk_r>
 80021a2:	1c43      	adds	r3, r0, #1
 80021a4:	d123      	bne.n	80021ee <_malloc_r+0x92>
 80021a6:	230c      	movs	r3, #12
 80021a8:	6033      	str	r3, [r6, #0]
 80021aa:	4630      	mov	r0, r6
 80021ac:	f000 f8e0 	bl	8002370 <__malloc_unlock>
 80021b0:	e7e3      	b.n	800217a <_malloc_r+0x1e>
 80021b2:	6823      	ldr	r3, [r4, #0]
 80021b4:	1b5b      	subs	r3, r3, r5
 80021b6:	d417      	bmi.n	80021e8 <_malloc_r+0x8c>
 80021b8:	2b0b      	cmp	r3, #11
 80021ba:	d903      	bls.n	80021c4 <_malloc_r+0x68>
 80021bc:	6023      	str	r3, [r4, #0]
 80021be:	441c      	add	r4, r3
 80021c0:	6025      	str	r5, [r4, #0]
 80021c2:	e004      	b.n	80021ce <_malloc_r+0x72>
 80021c4:	6863      	ldr	r3, [r4, #4]
 80021c6:	42a2      	cmp	r2, r4
 80021c8:	bf0c      	ite	eq
 80021ca:	600b      	streq	r3, [r1, #0]
 80021cc:	6053      	strne	r3, [r2, #4]
 80021ce:	4630      	mov	r0, r6
 80021d0:	f000 f8ce 	bl	8002370 <__malloc_unlock>
 80021d4:	f104 000b 	add.w	r0, r4, #11
 80021d8:	1d23      	adds	r3, r4, #4
 80021da:	f020 0007 	bic.w	r0, r0, #7
 80021de:	1ac2      	subs	r2, r0, r3
 80021e0:	d0cc      	beq.n	800217c <_malloc_r+0x20>
 80021e2:	1a1b      	subs	r3, r3, r0
 80021e4:	50a3      	str	r3, [r4, r2]
 80021e6:	e7c9      	b.n	800217c <_malloc_r+0x20>
 80021e8:	4622      	mov	r2, r4
 80021ea:	6864      	ldr	r4, [r4, #4]
 80021ec:	e7cc      	b.n	8002188 <_malloc_r+0x2c>
 80021ee:	1cc4      	adds	r4, r0, #3
 80021f0:	f024 0403 	bic.w	r4, r4, #3
 80021f4:	42a0      	cmp	r0, r4
 80021f6:	d0e3      	beq.n	80021c0 <_malloc_r+0x64>
 80021f8:	1a21      	subs	r1, r4, r0
 80021fa:	4630      	mov	r0, r6
 80021fc:	f000 f808 	bl	8002210 <_sbrk_r>
 8002200:	3001      	adds	r0, #1
 8002202:	d1dd      	bne.n	80021c0 <_malloc_r+0x64>
 8002204:	e7cf      	b.n	80021a6 <_malloc_r+0x4a>
 8002206:	bf00      	nop
 8002208:	200000b8 	.word	0x200000b8
 800220c:	200000bc 	.word	0x200000bc

08002210 <_sbrk_r>:
 8002210:	b538      	push	{r3, r4, r5, lr}
 8002212:	4d06      	ldr	r5, [pc, #24]	; (800222c <_sbrk_r+0x1c>)
 8002214:	2300      	movs	r3, #0
 8002216:	4604      	mov	r4, r0
 8002218:	4608      	mov	r0, r1
 800221a:	602b      	str	r3, [r5, #0]
 800221c:	f7fe fa30 	bl	8000680 <_sbrk>
 8002220:	1c43      	adds	r3, r0, #1
 8002222:	d102      	bne.n	800222a <_sbrk_r+0x1a>
 8002224:	682b      	ldr	r3, [r5, #0]
 8002226:	b103      	cbz	r3, 800222a <_sbrk_r+0x1a>
 8002228:	6023      	str	r3, [r4, #0]
 800222a:	bd38      	pop	{r3, r4, r5, pc}
 800222c:	200000f4 	.word	0x200000f4

08002230 <__sread>:
 8002230:	b510      	push	{r4, lr}
 8002232:	460c      	mov	r4, r1
 8002234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002238:	f000 f8a0 	bl	800237c <_read_r>
 800223c:	2800      	cmp	r0, #0
 800223e:	bfab      	itete	ge
 8002240:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002242:	89a3      	ldrhlt	r3, [r4, #12]
 8002244:	181b      	addge	r3, r3, r0
 8002246:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800224a:	bfac      	ite	ge
 800224c:	6563      	strge	r3, [r4, #84]	; 0x54
 800224e:	81a3      	strhlt	r3, [r4, #12]
 8002250:	bd10      	pop	{r4, pc}

08002252 <__swrite>:
 8002252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002256:	461f      	mov	r7, r3
 8002258:	898b      	ldrh	r3, [r1, #12]
 800225a:	05db      	lsls	r3, r3, #23
 800225c:	4605      	mov	r5, r0
 800225e:	460c      	mov	r4, r1
 8002260:	4616      	mov	r6, r2
 8002262:	d505      	bpl.n	8002270 <__swrite+0x1e>
 8002264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002268:	2302      	movs	r3, #2
 800226a:	2200      	movs	r2, #0
 800226c:	f000 f868 	bl	8002340 <_lseek_r>
 8002270:	89a3      	ldrh	r3, [r4, #12]
 8002272:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002276:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800227a:	81a3      	strh	r3, [r4, #12]
 800227c:	4632      	mov	r2, r6
 800227e:	463b      	mov	r3, r7
 8002280:	4628      	mov	r0, r5
 8002282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002286:	f000 b817 	b.w	80022b8 <_write_r>

0800228a <__sseek>:
 800228a:	b510      	push	{r4, lr}
 800228c:	460c      	mov	r4, r1
 800228e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002292:	f000 f855 	bl	8002340 <_lseek_r>
 8002296:	1c43      	adds	r3, r0, #1
 8002298:	89a3      	ldrh	r3, [r4, #12]
 800229a:	bf15      	itete	ne
 800229c:	6560      	strne	r0, [r4, #84]	; 0x54
 800229e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80022a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80022a6:	81a3      	strheq	r3, [r4, #12]
 80022a8:	bf18      	it	ne
 80022aa:	81a3      	strhne	r3, [r4, #12]
 80022ac:	bd10      	pop	{r4, pc}

080022ae <__sclose>:
 80022ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022b2:	f000 b813 	b.w	80022dc <_close_r>
	...

080022b8 <_write_r>:
 80022b8:	b538      	push	{r3, r4, r5, lr}
 80022ba:	4d07      	ldr	r5, [pc, #28]	; (80022d8 <_write_r+0x20>)
 80022bc:	4604      	mov	r4, r0
 80022be:	4608      	mov	r0, r1
 80022c0:	4611      	mov	r1, r2
 80022c2:	2200      	movs	r2, #0
 80022c4:	602a      	str	r2, [r5, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	f7fe f98d 	bl	80005e6 <_write>
 80022cc:	1c43      	adds	r3, r0, #1
 80022ce:	d102      	bne.n	80022d6 <_write_r+0x1e>
 80022d0:	682b      	ldr	r3, [r5, #0]
 80022d2:	b103      	cbz	r3, 80022d6 <_write_r+0x1e>
 80022d4:	6023      	str	r3, [r4, #0]
 80022d6:	bd38      	pop	{r3, r4, r5, pc}
 80022d8:	200000f4 	.word	0x200000f4

080022dc <_close_r>:
 80022dc:	b538      	push	{r3, r4, r5, lr}
 80022de:	4d06      	ldr	r5, [pc, #24]	; (80022f8 <_close_r+0x1c>)
 80022e0:	2300      	movs	r3, #0
 80022e2:	4604      	mov	r4, r0
 80022e4:	4608      	mov	r0, r1
 80022e6:	602b      	str	r3, [r5, #0]
 80022e8:	f7fe f999 	bl	800061e <_close>
 80022ec:	1c43      	adds	r3, r0, #1
 80022ee:	d102      	bne.n	80022f6 <_close_r+0x1a>
 80022f0:	682b      	ldr	r3, [r5, #0]
 80022f2:	b103      	cbz	r3, 80022f6 <_close_r+0x1a>
 80022f4:	6023      	str	r3, [r4, #0]
 80022f6:	bd38      	pop	{r3, r4, r5, pc}
 80022f8:	200000f4 	.word	0x200000f4

080022fc <_fstat_r>:
 80022fc:	b538      	push	{r3, r4, r5, lr}
 80022fe:	4d07      	ldr	r5, [pc, #28]	; (800231c <_fstat_r+0x20>)
 8002300:	2300      	movs	r3, #0
 8002302:	4604      	mov	r4, r0
 8002304:	4608      	mov	r0, r1
 8002306:	4611      	mov	r1, r2
 8002308:	602b      	str	r3, [r5, #0]
 800230a:	f7fe f993 	bl	8000634 <_fstat>
 800230e:	1c43      	adds	r3, r0, #1
 8002310:	d102      	bne.n	8002318 <_fstat_r+0x1c>
 8002312:	682b      	ldr	r3, [r5, #0]
 8002314:	b103      	cbz	r3, 8002318 <_fstat_r+0x1c>
 8002316:	6023      	str	r3, [r4, #0]
 8002318:	bd38      	pop	{r3, r4, r5, pc}
 800231a:	bf00      	nop
 800231c:	200000f4 	.word	0x200000f4

08002320 <_isatty_r>:
 8002320:	b538      	push	{r3, r4, r5, lr}
 8002322:	4d06      	ldr	r5, [pc, #24]	; (800233c <_isatty_r+0x1c>)
 8002324:	2300      	movs	r3, #0
 8002326:	4604      	mov	r4, r0
 8002328:	4608      	mov	r0, r1
 800232a:	602b      	str	r3, [r5, #0]
 800232c:	f7fe f991 	bl	8000652 <_isatty>
 8002330:	1c43      	adds	r3, r0, #1
 8002332:	d102      	bne.n	800233a <_isatty_r+0x1a>
 8002334:	682b      	ldr	r3, [r5, #0]
 8002336:	b103      	cbz	r3, 800233a <_isatty_r+0x1a>
 8002338:	6023      	str	r3, [r4, #0]
 800233a:	bd38      	pop	{r3, r4, r5, pc}
 800233c:	200000f4 	.word	0x200000f4

08002340 <_lseek_r>:
 8002340:	b538      	push	{r3, r4, r5, lr}
 8002342:	4d07      	ldr	r5, [pc, #28]	; (8002360 <_lseek_r+0x20>)
 8002344:	4604      	mov	r4, r0
 8002346:	4608      	mov	r0, r1
 8002348:	4611      	mov	r1, r2
 800234a:	2200      	movs	r2, #0
 800234c:	602a      	str	r2, [r5, #0]
 800234e:	461a      	mov	r2, r3
 8002350:	f7fe f989 	bl	8000666 <_lseek>
 8002354:	1c43      	adds	r3, r0, #1
 8002356:	d102      	bne.n	800235e <_lseek_r+0x1e>
 8002358:	682b      	ldr	r3, [r5, #0]
 800235a:	b103      	cbz	r3, 800235e <_lseek_r+0x1e>
 800235c:	6023      	str	r3, [r4, #0]
 800235e:	bd38      	pop	{r3, r4, r5, pc}
 8002360:	200000f4 	.word	0x200000f4

08002364 <__malloc_lock>:
 8002364:	4801      	ldr	r0, [pc, #4]	; (800236c <__malloc_lock+0x8>)
 8002366:	f7ff be45 	b.w	8001ff4 <__retarget_lock_acquire_recursive>
 800236a:	bf00      	nop
 800236c:	200000ec 	.word	0x200000ec

08002370 <__malloc_unlock>:
 8002370:	4801      	ldr	r0, [pc, #4]	; (8002378 <__malloc_unlock+0x8>)
 8002372:	f7ff be40 	b.w	8001ff6 <__retarget_lock_release_recursive>
 8002376:	bf00      	nop
 8002378:	200000ec 	.word	0x200000ec

0800237c <_read_r>:
 800237c:	b538      	push	{r3, r4, r5, lr}
 800237e:	4d07      	ldr	r5, [pc, #28]	; (800239c <_read_r+0x20>)
 8002380:	4604      	mov	r4, r0
 8002382:	4608      	mov	r0, r1
 8002384:	4611      	mov	r1, r2
 8002386:	2200      	movs	r2, #0
 8002388:	602a      	str	r2, [r5, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	f7fe f90e 	bl	80005ac <_read>
 8002390:	1c43      	adds	r3, r0, #1
 8002392:	d102      	bne.n	800239a <_read_r+0x1e>
 8002394:	682b      	ldr	r3, [r5, #0]
 8002396:	b103      	cbz	r3, 800239a <_read_r+0x1e>
 8002398:	6023      	str	r3, [r4, #0]
 800239a:	bd38      	pop	{r3, r4, r5, pc}
 800239c:	200000f4 	.word	0x200000f4

080023a0 <_init>:
 80023a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023a2:	bf00      	nop
 80023a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023a6:	bc08      	pop	{r3}
 80023a8:	469e      	mov	lr, r3
 80023aa:	4770      	bx	lr

080023ac <_fini>:
 80023ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ae:	bf00      	nop
 80023b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023b2:	bc08      	pop	{r3}
 80023b4:	469e      	mov	lr, r3
 80023b6:	4770      	bx	lr
